<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [morus_fuel_sensor\morus_fuel_sensor.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image morus_fuel_sensor\morus_fuel_sensor.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Tue May 23 10:01:09 2017
<BR><P>
<H3>Maximum Stack Usage =        232 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__sti___16_uc_stm32_can_cpp_7d6b3317 &rArr; uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::debug::LogMessage_&lang;(int)0&rang;&rang;(uavcan::DataTypeID) &rArr; uavcan::protocol::debug::LogMessage_&lang;(int)0&rang;::getDataTypeSignature() &rArr; uavcan::DataTypeSignature::extend(uavcan::DataTypeSignature) &rArr; uavcan::DataTypeSignature::mixin64(unsigned long long) &rArr; uavcan::DataTypeSignatureCRC::extend(unsigned long long)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[25]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[25]">ADC1_2_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[d]">BusFault_Handler</a> from stm32f3xx_it.o(i.BusFault_Handler) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[27]">CAN_RX0_IRQHandler</a> from uc_stm32_can.o(i.CAN_RX0_IRQHandler) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[28]">CAN_RX1_IRQHandler</a> from uc_stm32_can.o(i.CAN_RX1_IRQHandler) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[29]">CAN_SCE_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[26]">CAN_TX_IRQHandler</a> from uc_stm32_can.o(i.CAN_TX_IRQHandler) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[3b]">COMP2_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[3c]">COMP4_6_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel1_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[1f]">DMA1_Channel2_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[20]">DMA1_Channel3_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[21]">DMA1_Channel4_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[22]">DMA1_Channel5_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[23]">DMA1_Channel6_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[24]">DMA1_Channel7_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[10]">DebugMon_Handler</a> from stm32f3xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[19]">EXTI0_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[37]">EXTI15_10_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[1a]">EXTI1_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[1b]">EXTI2_TSC_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[1c]">EXTI3_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[1d]">EXTI4_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[2a]">EXTI9_5_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[17]">FLASH_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[44]">FPU_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[43]">HRTIM1_FLT_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[3d]">HRTIM1_Master_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[3e]">HRTIM1_TIMA_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[3f]">HRTIM1_TIMB_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[40]">HRTIM1_TIMC_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[41]">HRTIM1_TIMD_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[42]">HRTIM1_TIME_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[b]">HardFault_Handler</a> from stm32f3xx_it.o(i.HardFault_Handler) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[32]">I2C1_ER_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[31]">I2C1_EV_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[c]">MemManage_Handler</a> from stm32f3xx_it.o(i.MemManage_Handler) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[a]">NMI_Handler</a> from stm32f3xx_it.o(i.NMI_Handler) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[14]">PVD_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[11]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[18]">RCC_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[38]">RTC_Alarm_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[16]">RTC_WKUP_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[9]">Reset_Handler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[33]">SPI1_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[f]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[12]">SysTick_Handler</a> from stm32f3xx_it.o(i.SysTick_Handler) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[46]">SystemInit</a> from system_stm32f3xx.o(i.SystemInit) referenced from startup_stm32f334x8.o(.text)
 <LI><a href="#[15]">TAMP_STAMP_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[2b]">TIM1_BRK_TIM15_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[2e]">TIM1_CC_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[2d]">TIM1_TRG_COM_TIM17_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[2c]">TIM1_UP_TIM16_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[2f]">TIM2_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[30]">TIM3_IRQHandler</a> from uc_stm32_clock.o(i.TIM3_IRQHandler) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[39]">TIM6_DAC1_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[3a]">TIM7_DAC2_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[34]">USART1_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[35]">USART2_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[36]">USART3_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[e]">UsageFault_Handler</a> from stm32f3xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[13]">WWDG_IRQHandler</a> from startup_stm32f334x8.o(.text) referenced from startup_stm32f334x8.o(RESET)
 <LI><a href="#[4f]">StartDefaultTask(const void*)</a> from freertos.o(i._Z16StartDefaultTaskPKv) referenced from freertos.o(.constdata)
 <LI><a href="#[49]">uavcan_stm32::clock::UtcSyncParams::~UtcSyncParams()</a> from uc_stm32_clock.o(i._ZN12uavcan_stm325clock13UtcSyncParamsD1Ev) referenced from uc_stm32_clock.o(i.__sti___18_uc_stm32_clock_cpp_87095aac)
 <LI><a href="#[4a]">uavcan::MonotonicTime::~MonotonicTime()</a> from uc_generic_publisher.o(i._ZN6uavcan13MonotonicTimeD1Ev) referenced from uc_stm32_clock.o(i.__sti___18_uc_stm32_clock_cpp_87095aac)
 <LI><a href="#[4b]">uavcan::MonotonicDuration::~MonotonicDuration()</a> from uc_generic_publisher.o(i._ZN6uavcan17MonotonicDurationD1Ev) referenced from uc_outgoing_transfer_registry.o(i.__sti___33_uc_outgoing_transfer_registry_cpp_e869a750)
 <LI><a href="#[4e]">uavcan::GlobalDataTypeRegistry::Entry::~Entry()</a> from uc_dynamic_node_id_client.o(i._ZN6uavcan22GlobalDataTypeRegistry5EntryD1Ev) referenced from uc_node_status_provider.o(t._ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol11NodeStatus_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE)
 <LI><a href="#[4e]">uavcan::GlobalDataTypeRegistry::Entry::~Entry()</a> from uc_dynamic_node_id_client.o(i._ZN6uavcan22GlobalDataTypeRegistry5EntryD1Ev) referenced from uc_node_status_provider.o(t._ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol12GetNodeInfo_EEENS0_18RegistrationResultENS_10DataTypeIDE)
 <LI><a href="#[4e]">uavcan::GlobalDataTypeRegistry::Entry::~Entry()</a> from uc_dynamic_node_id_client.o(i._ZN6uavcan22GlobalDataTypeRegistry5EntryD1Ev) referenced from uc_stm32_can.o(t._ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol12RestartNode_EEENS0_18RegistrationResultENS_10DataTypeIDE)
 <LI><a href="#[4e]">uavcan::GlobalDataTypeRegistry::Entry::~Entry()</a> from uc_dynamic_node_id_client.o(i._ZN6uavcan22GlobalDataTypeRegistry5EntryD1Ev) referenced from uc_dynamic_node_id_client.o(t._ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol15dynamic_node_id11Allocation_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE)
 <LI><a href="#[4e]">uavcan::GlobalDataTypeRegistry::Entry::~Entry()</a> from uc_dynamic_node_id_client.o(i._ZN6uavcan22GlobalDataTypeRegistry5EntryD1Ev) referenced from uc_stm32_can.o(t._ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol16GetDataTypeInfo_EEENS0_18RegistrationResultENS_10DataTypeIDE)
 <LI><a href="#[4e]">uavcan::GlobalDataTypeRegistry::Entry::~Entry()</a> from uc_dynamic_node_id_client.o(i._ZN6uavcan22GlobalDataTypeRegistry5EntryD1Ev) referenced from uc_stm32_can.o(t._ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol18GetTransportStats_EEENS0_18RegistrationResultENS_10DataTypeIDE)
 <LI><a href="#[4e]">uavcan::GlobalDataTypeRegistry::Entry::~Entry()</a> from uc_dynamic_node_id_client.o(i._ZN6uavcan22GlobalDataTypeRegistry5EntryD1Ev) referenced from uc_stm32_can.o(t._ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol5debug11LogMessage_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE)
 <LI><a href="#[48]">uavcan::GlobalDataTypeRegistry::~GlobalDataTypeRegistry()</a> from uc_global_data_type_registry.o(i._ZN6uavcan22GlobalDataTypeRegistryD1Ev) referenced from uc_global_data_type_registry.o(i._ZN6uavcan22GlobalDataTypeRegistry8instanceEv)
 <LI><a href="#[47]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f334x8.o(.text)
 <LI><a href="#[53]">__sti___15_uc_transfer_cpp_49afa4ea</a> from uc_transfer.o(i.__sti___15_uc_transfer_cpp_49afa4ea) referenced from uc_transfer.o(.init_array)
 <LI><a href="#[54]">__sti___16_uc_stm32_can_cpp_7d6b3317</a> from uc_stm32_can.o(i.__sti___16_uc_stm32_can_cpp_7d6b3317) referenced from uc_stm32_can.o(.init_array)
 <LI><a href="#[56]">__sti___18_uc_stm32_clock_cpp_87095aac</a> from uc_stm32_clock.o(i.__sti___18_uc_stm32_clock_cpp_87095aac) referenced from uc_stm32_clock.o(.init_array)
 <LI><a href="#[55]">__sti___19_uc_stm32_thread_cpp_d810ad60</a> from uc_stm32_thread.o(i.__sti___19_uc_stm32_thread_cpp_d810ad60) referenced from uc_stm32_thread.o(.init_array)
 <LI><a href="#[57]">__sti___22_acu_libuavcanSTM32_cpp_be63688e</a> from acu_libuavcanstm32.o(i.__sti___22_acu_libuavcanSTM32_cpp_be63688e) referenced from acu_libuavcanstm32.o(.init_array)
 <LI><a href="#[51]">__sti___27_uc_node_status_provider_cpp_54b78f91</a> from uc_node_status_provider.o(i.__sti___27_uc_node_status_provider_cpp_54b78f91) referenced from uc_node_status_provider.o(.init_array)
 <LI><a href="#[50]">__sti___29_uc_dynamic_node_id_client_cpp_fa4b5bf3</a> from uc_dynamic_node_id_client.o(i.__sti___29_uc_dynamic_node_id_client_cpp_fa4b5bf3) referenced from uc_dynamic_node_id_client.o(.init_array)
 <LI><a href="#[52]">__sti___33_uc_outgoing_transfer_registry_cpp_e869a750</a> from uc_outgoing_transfer_registry.o(i.__sti___33_uc_outgoing_transfer_registry_cpp_e869a750) referenced from uc_outgoing_transfer_registry.o(.init_array)
 <LI><a href="#[45]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[4d]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[4c]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[47]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(.text)
</UL>
<P><STRONG><a name="[f1]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[59]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[66]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[f2]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[5b]"></a>_main_cpp_init$empty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8a.o(.ARM.Collect$$$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _main_cpp_init$empty &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[f3]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[f4]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[f5]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[5c]"></a>__rt_final_cpp$nonempty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10b.o(.ARM.Collect$$$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __rt_final_cpp$nonempty &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[f6]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[f]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[db]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[da]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[11]"></a>PendSV_Handler</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[d6]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[9]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>CAN_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>COMP2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>COMP4_6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI2_TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>HRTIM1_FLT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>HRTIM1_Master_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>HRTIM1_TIMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>HRTIM1_TIMB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>HRTIM1_TIMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>HRTIM1_TIMD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>HRTIM1_TIME_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM1_BRK_TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM1_TRG_COM_TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM6_DAC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM7_DAC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f334x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::DataTypeSignature::mixin64(unsigned long long)
</UL>

<P><STRONG><a name="[f7]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[7b]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::dynamic_node_id::Allocation_&lang;(int)0&rang;&rang;(uavcan::DataTypeID)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::GetNodeInfo_&rang;(uavcan::DataTypeID)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::NodeStatus_&lang;(int)0&rang;&rang;(uavcan::DataTypeID)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::debug::LogMessage_&lang;(int)0&rang;&rang;(uavcan::DataTypeID)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::GetTransportStats_&rang;(uavcan::DataTypeID)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::GetDataTypeInfo_&rang;(uavcan::DataTypeID)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::RestartNode_&rang;(uavcan::DataTypeID)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_stm32::CanIface::RxQueue::push(const uavcan::CanFrame&, const unsigned long long&, unsigned short)
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init()
</UL>

<P><STRONG><a name="[f8]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[f9]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[fa]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[fb]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[fc]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[98]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::DataTypeDescriptor::match(uavcan::DataTypeKind, const char*) const
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::registImpl(uavcan::GlobalDataTypeRegistry::Entry*)
</UL>

<P><STRONG><a name="[58]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cpp_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_cpp_init$empty
</UL>

<P><STRONG><a name="[62]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::instance()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::dynamic_node_id::Allocation_&lang;(int)0&rang;&rang;(uavcan::DataTypeID)
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___33_uc_outgoing_transfer_registry_cpp_e869a750
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::GetNodeInfo_&rang;(uavcan::DataTypeID)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::NodeStatus_&lang;(int)0&rang;&rang;(uavcan::DataTypeID)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::debug::LogMessage_&lang;(int)0&rang;&rang;(uavcan::DataTypeID)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::GetTransportStats_&rang;(uavcan::DataTypeID)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::GetDataTypeInfo_&rang;(uavcan::DataTypeID)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::RestartNode_&rang;(uavcan::DataTypeID)
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___18_uc_stm32_clock_cpp_87095aac
</UL>

<P><STRONG><a name="[64]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpp_dtor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[5d]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_final_cpp$nonempty
</UL>

<P><STRONG><a name="[5a]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[fd]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpp_final.o(.text), UNUSED)

<P><STRONG><a name="[d]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f3xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>CAN_RX0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uc_stm32_can.o(i.CAN_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CAN_RX0_IRQHandler &rArr; uavcan_stm32::&lang;unnamed namespace _16_uc_stm32_can_cpp_7d6b3317&rang;::handleRxInterrupt(unsigned char, unsigned char) &rArr; uavcan_stm32::CanIface::handleRxInterrupt(unsigned char, unsigned long long) &rArr; uavcan_stm32::BusEvent::signalFromInterrupt() &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_stm32::&lang;unnamed namespace _16_uc_stm32_can_cpp_7d6b3317&rang;::handleRxInterrupt(unsigned char, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>CAN_RX1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uc_stm32_can.o(i.CAN_RX1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CAN_RX1_IRQHandler &rArr; uavcan_stm32::&lang;unnamed namespace _16_uc_stm32_can_cpp_7d6b3317&rang;::handleRxInterrupt(unsigned char, unsigned char) &rArr; uavcan_stm32::CanIface::handleRxInterrupt(unsigned char, unsigned long long) &rArr; uavcan_stm32::BusEvent::signalFromInterrupt() &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_stm32::&lang;unnamed namespace _16_uc_stm32_can_cpp_7d6b3317&rang;::handleRxInterrupt(unsigned char, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>CAN_TX_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, uc_stm32_can.o(i.CAN_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CAN_TX_IRQHandler &rArr; uavcan_stm32::CanIface::handleTxInterrupt(unsigned long long) &rArr; uavcan_stm32::BusEvent::signalFromInterrupt() &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_stm32::clock::getUtcUSecFromCanInterrupt()
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_stm32::CanIface::handleTxInterrupt(unsigned long long)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f3xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>HAL_GPIO_Init</STRONG> (Thumb, 422 bytes, Stack size 20 bytes, stm32f3xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[73]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f3xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[78]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f3xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[6a]"></a>HAL_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f3xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>HAL_InitTick</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f3xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[6d]"></a>HAL_MspInit</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, stm32f3xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[6f]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f3xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[6b]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f3xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[72]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 732 bytes, Stack size 16 bytes, stm32f3xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[80]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f3xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[74]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, stm32f3xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[75]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 2550 bytes, Stack size 24 bytes, stm32f3xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[81]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f3xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[6e]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f3xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[b]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f3xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>MX_GPIO_Init</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f3xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f3xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f3xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SysTick_Handler &rArr; osSystickHandler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SystemInit</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, system_stm32f3xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(.text)
</UL>
<P><STRONG><a name="[30]"></a>TIM3_IRQHandler</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, uc_stm32_clock.o(i.TIM3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f3xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f334x8.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>Error_Handler()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i._Z13Error_Handlerv))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[7a]"></a>MX_FREERTOS_Init()</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, freertos.o(i._Z16MX_FREERTOS_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = MX_FREERTOS_Init() &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4f]"></a>StartDefaultTask(const void*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, freertos.o(i._Z16StartDefaultTaskPKv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = StartDefaultTask(const void*) &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>SystemClock_Config()</STRONG> (Thumb, 98 bytes, Stack size 72 bytes, main.o(i._Z18SystemClock_Configv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SystemClock_Config() &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler()
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[49]"></a>uavcan_stm32::clock::UtcSyncParams::~UtcSyncParams()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, uc_stm32_clock.o(i._ZN12uavcan_stm325clock13UtcSyncParamsD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uavcan_stm32::clock::UtcSyncParams::~UtcSyncParams()
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::UtcDuration::~UtcDuration()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uc_stm32_clock.o(i.__sti___18_uc_stm32_clock_cpp_87095aac)
</UL>
<P><STRONG><a name="[ff]"></a>uavcan_stm32::clock::UtcSyncParams::~UtcSyncParams__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, uc_stm32_clock.o(i._ZN12uavcan_stm325clock13UtcSyncParamsD1Ev), UNUSED)

<P><STRONG><a name="[68]"></a>uavcan_stm32::clock::getUtcUSecFromCanInterrupt()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, uc_stm32_clock.o(i._ZN12uavcan_stm325clock26getUtcUSecFromCanInterruptEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = uavcan_stm32::clock::getUtcUSecFromCanInterrupt() &rArr; [local to uc_stm32_clock_cpp]::uavcan_stm32::clock::sampleUtcFromCriticalSection()
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to uc_stm32_clock_cpp]::uavcan_stm32::clock::sampleUtcFromCriticalSection()
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_stm32::&lang;unnamed namespace _16_uc_stm32_can_cpp_7d6b3317&rang;::handleRxInterrupt(unsigned char, unsigned char)
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_IRQHandler
</UL>

<P><STRONG><a name="[8a]"></a>uavcan_stm32::BusEvent::yieldFromISR()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uc_stm32_thread.o(i._ZN12uavcan_stm328BusEvent12yieldFromISREv))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_stm32::CanIface::handleTxInterrupt(unsigned long long)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_stm32::CanIface::handleRxInterrupt(unsigned char, unsigned long long)
</UL>

<P><STRONG><a name="[85]"></a>uavcan_stm32::BusEvent::signalFromInterrupt()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, uc_stm32_thread.o(i._ZN12uavcan_stm328BusEvent19signalFromInterruptEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = uavcan_stm32::BusEvent::signalFromInterrupt() &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_stm32::CanIface::handleTxInterrupt(unsigned long long)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_stm32::CanIface::handleRxInterrupt(unsigned char, unsigned long long)
</UL>

<P><STRONG><a name="[82]"></a>uavcan_stm32::CanIface::handleRxInterrupt(unsigned char, unsigned long long)</STRONG> (Thumb, 252 bytes, Stack size 56 bytes, uc_stm32_can.o(i._ZN12uavcan_stm328CanIface17handleRxInterruptEhy))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = uavcan_stm32::CanIface::handleRxInterrupt(unsigned char, unsigned long long) &rArr; uavcan_stm32::BusEvent::signalFromInterrupt() &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::CanFrame::CanFrame()
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_stm32::BusEvent::signalFromInterrupt()
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_stm32::BusEvent::yieldFromISR()
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_stm32::CanIface::RxQueue::push(const uavcan::CanFrame&, const unsigned long long&, unsigned short)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_stm32::CanIface::pollErrorFlagsFromISR()
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_stm32::&lang;unnamed namespace _16_uc_stm32_can_cpp_7d6b3317&rang;::handleRxInterrupt(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[69]"></a>uavcan_stm32::CanIface::handleTxInterrupt(unsigned long long)</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, uc_stm32_can.o(i._ZN12uavcan_stm328CanIface17handleTxInterruptEy))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = uavcan_stm32::CanIface::handleTxInterrupt(unsigned long long) &rArr; uavcan_stm32::BusEvent::signalFromInterrupt() &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_stm32::BusEvent::signalFromInterrupt()
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_stm32::BusEvent::yieldFromISR()
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_stm32::CanIface::handleTxMailboxInterrupt(unsigned char, bool, unsigned long long)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_stm32::CanIface::pollErrorFlagsFromISR()
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_IRQHandler
</UL>

<P><STRONG><a name="[89]"></a>uavcan_stm32::CanIface::pollErrorFlagsFromISR()</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, uc_stm32_can.o(i._ZN12uavcan_stm328CanIface21pollErrorFlagsFromISREv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uavcan_stm32::CanIface::pollErrorFlagsFromISR()
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_stm32::CanIface::handleTxInterrupt(unsigned long long)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_stm32::CanIface::handleRxInterrupt(unsigned char, unsigned long long)
</UL>

<P><STRONG><a name="[8b]"></a>uavcan_stm32::CanIface::handleTxMailboxInterrupt(unsigned char, bool, unsigned long long)</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, uc_stm32_can.o(i._ZN12uavcan_stm328CanIface24handleTxMailboxInterruptEhby))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uavcan_stm32::CanIface::handleTxMailboxInterrupt(unsigned char, bool, unsigned long long) &rArr; uavcan_stm32::CanIface::RxQueue::push(const uavcan::CanFrame&, const unsigned long long&, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_stm32::CanIface::RxQueue::push(const uavcan::CanFrame&, const unsigned long long&, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_stm32::CanIface::handleTxInterrupt(unsigned long long)
</UL>

<P><STRONG><a name="[8c]"></a>uavcan_stm32::CanIface::RxQueue::registerOverflow()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uc_stm32_can.o(i._ZN12uavcan_stm328CanIface7RxQueue16registerOverflowEv))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_stm32::CanIface::RxQueue::push(const uavcan::CanFrame&, const unsigned long long&, unsigned short)
</UL>

<P><STRONG><a name="[88]"></a>uavcan_stm32::CanIface::RxQueue::push(const uavcan::CanFrame&, const unsigned long long&, unsigned short)</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, uc_stm32_can.o(i._ZN12uavcan_stm328CanIface7RxQueue4pushERKN6uavcan8CanFrameERKyt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uavcan_stm32::CanIface::RxQueue::push(const uavcan::CanFrame&, const unsigned long long&, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_stm32::CanIface::RxQueue::registerOverflow()
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_stm32::CanIface::handleTxMailboxInterrupt(unsigned char, bool, unsigned long long)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_stm32::CanIface::handleRxInterrupt(unsigned char, unsigned long long)
</UL>

<P><STRONG><a name="[8d]"></a>uavcan::DataTypeID::getMaxValueForDataTypeKind(uavcan::DataTypeKind)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, uc_data_type.o(i._ZN6uavcan10DataTypeID26getMaxValueForDataTypeKindENS_12DataTypeKindE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uavcan::DataTypeID::getMaxValueForDataTypeKind(uavcan::DataTypeKind)
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::DataTypeID::DataTypeID(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::DataTypeDescriptor::isValid() const
</UL>

<P><STRONG><a name="[8e]"></a>uavcan::DataTypeID::DataTypeID(unsigned short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uc_node_status_provider.o(i._ZN6uavcan10DataTypeIDC1Et))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::DataTypeID::getMaxValueForDataTypeKind(uavcan::DataTypeKind)
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___27_uc_node_status_provider_cpp_54b78f91
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___16_uc_stm32_can_cpp_7d6b3317
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___19_uc_stm32_thread_cpp_d810ad60
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___18_uc_stm32_clock_cpp_87095aac
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___22_acu_libuavcanSTM32_cpp_be63688e
</UL>

<P><STRONG><a name="[100]"></a>uavcan::DataTypeID::DataTypeID__sub_object(unsigned short)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uc_node_status_provider.o(i._ZN6uavcan10DataTypeIDC1Et), UNUSED)

<P><STRONG><a name="[83]"></a>uavcan::UtcDuration::~UtcDuration()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uc_stm32_clock.o(i._ZN6uavcan11UtcDurationD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_stm32::clock::UtcSyncParams::~UtcSyncParams()
</UL>

<P><STRONG><a name="[101]"></a>uavcan::UtcDuration::~UtcDuration__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uc_stm32_clock.o(i._ZN6uavcan11UtcDurationD1Ev), UNUSED)

<P><STRONG><a name="[ad]"></a>uavcan::MonotonicTime::MonotonicTime()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uc_scheduler.o(i._ZN6uavcan13MonotonicTimeC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___18_uc_stm32_clock_cpp_87095aac
</UL>

<P><STRONG><a name="[102]"></a>uavcan::MonotonicTime::MonotonicTime__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uc_scheduler.o(i._ZN6uavcan13MonotonicTimeC1Ev), UNUSED)

<P><STRONG><a name="[4a]"></a>uavcan::MonotonicTime::~MonotonicTime()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uc_generic_publisher.o(i._ZN6uavcan13MonotonicTimeD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> uc_stm32_clock.o(i.__sti___18_uc_stm32_clock_cpp_87095aac)
</UL>
<P><STRONG><a name="[103]"></a>uavcan::MonotonicTime::~MonotonicTime__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uc_generic_publisher.o(i._ZN6uavcan13MonotonicTimeD1Ev), UNUSED)

<P><STRONG><a name="[a1]"></a>uavcan::LinkedListRoot&lang;uavcan::GlobalDataTypeRegistry::Entry&rang;::~LinkedListRoot()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uc_global_data_type_registry.o(i._ZN6uavcan14LinkedListRootINS_22GlobalDataTypeRegistry5EntryEED1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::~GlobalDataTypeRegistry()
</UL>

<P><STRONG><a name="[104]"></a>uavcan::LinkedListRoot&lang;uavcan::GlobalDataTypeRegistry::Entry&rang;::~LinkedListRoot__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uc_global_data_type_registry.o(i._ZN6uavcan14LinkedListRootINS_22GlobalDataTypeRegistry5EntryEED1Ev), UNUSED)

<P><STRONG><a name="[a3]"></a>uavcan::TransferPriority::TransferPriority(unsigned char)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uc_transfer.o(i._ZN6uavcan16TransferPriorityC1Eh))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___15_uc_transfer_cpp_49afa4ea
</UL>

<P><STRONG><a name="[105]"></a>uavcan::TransferPriority::TransferPriority__sub_object(unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uc_transfer.o(i._ZN6uavcan16TransferPriorityC1Eh), UNUSED)

<P><STRONG><a name="[a5]"></a>uavcan::handleFatalError(const char*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uc_error.o(i._ZN6uavcan16handleFatalErrorEPKc))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___29_uc_dynamic_node_id_client_cpp_fa4b5bf3
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___27_uc_node_status_provider_cpp_54b78f91
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___16_uc_stm32_can_cpp_7d6b3317
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___19_uc_stm32_thread_cpp_d810ad60
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___18_uc_stm32_clock_cpp_87095aac
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___22_acu_libuavcanSTM32_cpp_be63688e
</UL>

<P><STRONG><a name="[8f]"></a>uavcan::DataTypeSignature::extend(uavcan::DataTypeSignature)</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, uc_data_type.o(i._ZN6uavcan17DataTypeSignature6extendES0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = uavcan::DataTypeSignature::extend(uavcan::DataTypeSignature) &rArr; uavcan::DataTypeSignature::mixin64(unsigned long long) &rArr; uavcan::DataTypeSignatureCRC::extend(unsigned long long)
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::DataTypeSignature::mixin64(unsigned long long)
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::GetNodeInfo_&rang;(uavcan::DataTypeID)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::protocol::debug::LogMessage_&lang;(int)0&rang;::getDataTypeSignature()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::protocol::DataTypeKind_&lang;(int)0&rang;::extendDataTypeSignature(uavcan::DataTypeSignature&)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::GetTransportStats_&rang;(uavcan::DataTypeID)
</UL>

<P><STRONG><a name="[90]"></a>uavcan::DataTypeSignature::mixin64(unsigned long long)</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, uc_data_type.o(i._ZN6uavcan17DataTypeSignature7mixin64Ey))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uavcan::DataTypeSignature::mixin64(unsigned long long) &rArr; uavcan::DataTypeSignatureCRC::extend(unsigned long long)
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::DataTypeSignatureCRC::extend(unsigned long long)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::DataTypeSignatureCRC::add(unsigned char)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::DataTypeSignature::extend(uavcan::DataTypeSignature)
</UL>

<P><STRONG><a name="[e7]"></a>uavcan::DataTypeSignature::DataTypeSignature(unsigned long long)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uc_node_status_provider.o(i._ZN6uavcan17DataTypeSignatureC1Ey))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::protocol::SoftwareVersion_&lang;(int)0&rang;::getDataTypeSignature()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::protocol::HardwareVersion_&lang;(int)0&rang;::getDataTypeSignature()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::protocol::NodeStatus_&lang;(int)0&rang;::getDataTypeSignature()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::GetNodeInfo_&rang;(uavcan::DataTypeID)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::protocol::debug::LogLevel_&lang;(int)0&rang;::getDataTypeSignature()
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::protocol::debug::LogMessage_&lang;(int)0&rang;::getDataTypeSignature()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::protocol::CANIfaceStats_&lang;(int)0&rang;::getDataTypeSignature()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::protocol::DataTypeKind_&lang;(int)0&rang;::getDataTypeSignature()
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::GetTransportStats_&rang;(uavcan::DataTypeID)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::GetDataTypeInfo_&rang;(uavcan::DataTypeID)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::RestartNode_&rang;(uavcan::DataTypeID)
</UL>

<P><STRONG><a name="[106]"></a>uavcan::DataTypeSignature::DataTypeSignature__sub_object(unsigned long long)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uc_node_status_provider.o(i._ZN6uavcan17DataTypeSignatureC1Ey), UNUSED)

<P><STRONG><a name="[4b]"></a>uavcan::MonotonicDuration::~MonotonicDuration()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uc_generic_publisher.o(i._ZN6uavcan17MonotonicDurationD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> uc_outgoing_transfer_registry.o(i.__sti___33_uc_outgoing_transfer_registry_cpp_e869a750)
</UL>
<P><STRONG><a name="[107]"></a>uavcan::MonotonicDuration::~MonotonicDuration__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uc_generic_publisher.o(i._ZN6uavcan17MonotonicDurationD1Ev), UNUSED)

<P><STRONG><a name="[e6]"></a>uavcan::DataTypeDescriptor::DataTypeDescriptor(uavcan::DataTypeKind, uavcan::DataTypeID, const uavcan::DataTypeSignature&, const char*)</STRONG> (Thumb, 24 bytes, Stack size 28 bytes, uc_node_status_provider.o(i._ZN6uavcan18DataTypeDescriptorC1ENS_12DataTypeKindENS_10DataTypeIDERKNS_17DataTypeSignatureEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = uavcan::DataTypeDescriptor::DataTypeDescriptor(uavcan::DataTypeKind, uavcan::DataTypeID, const uavcan::DataTypeSignature&, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::GetNodeInfo_&rang;(uavcan::DataTypeID)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::NodeStatus_&lang;(int)0&rang;&rang;(uavcan::DataTypeID)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::debug::LogMessage_&lang;(int)0&rang;&rang;(uavcan::DataTypeID)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::GetTransportStats_&rang;(uavcan::DataTypeID)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::GetDataTypeInfo_&rang;(uavcan::DataTypeID)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::RestartNode_&rang;(uavcan::DataTypeID)
</UL>

<P><STRONG><a name="[108]"></a>uavcan::DataTypeDescriptor::DataTypeDescriptor__sub_object(uavcan::DataTypeKind, uavcan::DataTypeID, const uavcan::DataTypeSignature&, const char*)</STRONG> (Thumb, 0 bytes, Stack size 28 bytes, uc_node_status_provider.o(i._ZN6uavcan18DataTypeDescriptorC1ENS_12DataTypeKindENS_10DataTypeIDERKNS_17DataTypeSignatureEPKc), UNUSED)

<P><STRONG><a name="[93]"></a>uavcan::DataTypeSignatureCRC::add(unsigned char)</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, uc_data_type.o(i._ZN6uavcan20DataTypeSignatureCRC3addEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = uavcan::DataTypeSignatureCRC::add(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::DataTypeSignature::mixin64(unsigned long long)
</UL>

<P><STRONG><a name="[91]"></a>uavcan::DataTypeSignatureCRC::extend(unsigned long long)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, uc_data_type.o(i._ZN6uavcan20DataTypeSignatureCRC6extendEy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uavcan::DataTypeSignatureCRC::extend(unsigned long long)
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::DataTypeSignature::mixin64(unsigned long long)
</UL>

<P><STRONG><a name="[94]"></a>uavcan::GlobalDataTypeRegistry::registImpl(uavcan::GlobalDataTypeRegistry::Entry*)</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, uc_global_data_type_registry.o(i._ZN6uavcan22GlobalDataTypeRegistry10registImplEPNS0_5EntryE))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = uavcan::GlobalDataTypeRegistry::registImpl(uavcan::GlobalDataTypeRegistry::Entry*) &rArr; void uavcan::LinkedListRoot&lang;uavcan::GlobalDataTypeRegistry::Entry&rang;::insertBefore&lang;uavcan::GlobalDataTypeRegistry::EntryInsertionComparator&rang;(uavcan::GlobalDataTypeRegistry::Entry*, T1) &rArr; uavcan::LinkedListRoot&lang;uavcan::GlobalDataTypeRegistry::Entry&rang;::remove(const uavcan::GlobalDataTypeRegistry::Entry*)
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::DataTypeDescriptor::isValid() const
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::LinkedListRoot&lang;uavcan::GlobalDataTypeRegistry::Entry&rang;::get() const
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::LinkedListNode&lang;uavcan::GlobalDataTypeRegistry::Entry&rang;::getNextListNode() const
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void uavcan::LinkedListRoot&lang;uavcan::GlobalDataTypeRegistry::Entry&rang;::insertBefore&lang;uavcan::GlobalDataTypeRegistry::EntryInsertionComparator&rang;(uavcan::GlobalDataTypeRegistry::Entry*, T1)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::selectList(uavcan::DataTypeKind) const
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::dynamic_node_id::Allocation_&lang;(int)0&rang;&rang;(uavcan::DataTypeID)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::GetNodeInfo_&rang;(uavcan::DataTypeID)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::NodeStatus_&lang;(int)0&rang;&rang;(uavcan::DataTypeID)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::debug::LogMessage_&lang;(int)0&rang;&rang;(uavcan::DataTypeID)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::GetTransportStats_&rang;(uavcan::DataTypeID)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::GetDataTypeInfo_&rang;(uavcan::DataTypeID)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::RestartNode_&rang;(uavcan::DataTypeID)
</UL>

<P><STRONG><a name="[e4]"></a>uavcan::GlobalDataTypeRegistry::Entry::Entry()</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, uc_dynamic_node_id_client.o(i._ZN6uavcan22GlobalDataTypeRegistry5EntryC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uavcan::GlobalDataTypeRegistry::Entry::Entry()
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::dynamic_node_id::Allocation_&lang;(int)0&rang;&rang;(uavcan::DataTypeID)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::GetNodeInfo_&rang;(uavcan::DataTypeID)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::NodeStatus_&lang;(int)0&rang;&rang;(uavcan::DataTypeID)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::debug::LogMessage_&lang;(int)0&rang;&rang;(uavcan::DataTypeID)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::GetTransportStats_&rang;(uavcan::DataTypeID)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::GetDataTypeInfo_&rang;(uavcan::DataTypeID)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::RestartNode_&rang;(uavcan::DataTypeID)
</UL>

<P><STRONG><a name="[109]"></a>uavcan::GlobalDataTypeRegistry::Entry::Entry__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, uc_dynamic_node_id_client.o(i._ZN6uavcan22GlobalDataTypeRegistry5EntryC1Ev), UNUSED)

<P><STRONG><a name="[4e]"></a>uavcan::GlobalDataTypeRegistry::Entry::~Entry()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uc_dynamic_node_id_client.o(i._ZN6uavcan22GlobalDataTypeRegistry5EntryD1Ev))
<BR>[Address Reference Count : 7]<UL><LI> uc_dynamic_node_id_client.o(t._ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol15dynamic_node_id11Allocation_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE)
<LI> uc_node_status_provider.o(t._ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol11NodeStatus_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE)
<LI> uc_node_status_provider.o(t._ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol12GetNodeInfo_EEENS0_18RegistrationResultENS_10DataTypeIDE)
<LI> uc_stm32_can.o(t._ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol16GetDataTypeInfo_EEENS0_18RegistrationResultENS_10DataTypeIDE)
<LI> uc_stm32_can.o(t._ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol5debug11LogMessage_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE)
<LI> uc_stm32_can.o(t._ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol12RestartNode_EEENS0_18RegistrationResultENS_10DataTypeIDE)
<LI> uc_stm32_can.o(t._ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol18GetTransportStats_EEENS0_18RegistrationResultENS_10DataTypeIDE)
</UL>
<P><STRONG><a name="[10a]"></a>uavcan::GlobalDataTypeRegistry::Entry::~Entry__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uc_dynamic_node_id_client.o(i._ZN6uavcan22GlobalDataTypeRegistry5EntryD1Ev), UNUSED)

<P><STRONG><a name="[9b]"></a>uavcan::GlobalDataTypeRegistry::remove(uavcan::GlobalDataTypeRegistry::Entry*)</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, uc_global_data_type_registry.o(i._ZN6uavcan22GlobalDataTypeRegistry6removeEPNS0_5EntryE))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = uavcan::GlobalDataTypeRegistry::remove(uavcan::GlobalDataTypeRegistry::Entry*) &rArr; uavcan::DataTypeDescriptor::match(uavcan::DataTypeKind, const char*) const &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::DataTypeDescriptor::match(uavcan::DataTypeKind, const char*) const
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::LinkedListRoot&lang;uavcan::GlobalDataTypeRegistry::Entry&rang;::get() const
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::LinkedListNode&lang;uavcan::GlobalDataTypeRegistry::Entry&rang;::getNextListNode() const
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::LinkedListRoot&lang;uavcan::GlobalDataTypeRegistry::Entry&rang;::remove(const uavcan::GlobalDataTypeRegistry::Entry*)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::selectList(uavcan::DataTypeKind) const
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::dynamic_node_id::Allocation_&lang;(int)0&rang;&rang;(uavcan::DataTypeID)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::GetNodeInfo_&rang;(uavcan::DataTypeID)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::NodeStatus_&lang;(int)0&rang;&rang;(uavcan::DataTypeID)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::debug::LogMessage_&lang;(int)0&rang;&rang;(uavcan::DataTypeID)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::GetTransportStats_&rang;(uavcan::DataTypeID)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::GetDataTypeInfo_&rang;(uavcan::DataTypeID)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::RestartNode_&rang;(uavcan::DataTypeID)
</UL>

<P><STRONG><a name="[9e]"></a>uavcan::GlobalDataTypeRegistry::instance()</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, uc_global_data_type_registry.o(i._ZN6uavcan22GlobalDataTypeRegistry8instanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = uavcan::GlobalDataTypeRegistry::instance() &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::LinkedListRoot&lang;uavcan::GlobalDataTypeRegistry::Entry&rang;::LinkedListRoot()
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___29_uc_dynamic_node_id_client_cpp_fa4b5bf3
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___27_uc_node_status_provider_cpp_54b78f91
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___16_uc_stm32_can_cpp_7d6b3317
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___19_uc_stm32_thread_cpp_d810ad60
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___18_uc_stm32_clock_cpp_87095aac
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___22_acu_libuavcanSTM32_cpp_be63688e
</UL>

<P><STRONG><a name="[48]"></a>uavcan::GlobalDataTypeRegistry::~GlobalDataTypeRegistry()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, uc_global_data_type_registry.o(i._ZN6uavcan22GlobalDataTypeRegistryD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uavcan::GlobalDataTypeRegistry::~GlobalDataTypeRegistry()
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::LinkedListRoot&lang;uavcan::GlobalDataTypeRegistry::Entry&rang;::~LinkedListRoot()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uc_global_data_type_registry.o(i._ZN6uavcan22GlobalDataTypeRegistry8instanceEv)
</UL>
<P><STRONG><a name="[10b]"></a>uavcan::GlobalDataTypeRegistry::~GlobalDataTypeRegistry__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, uc_global_data_type_registry.o(i._ZN6uavcan22GlobalDataTypeRegistryD1Ev), UNUSED)

<P><STRONG><a name="[87]"></a>uavcan::CanFrame::CanFrame()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, uc_dispatcher.o(i._ZN6uavcan8CanFrameC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uavcan::CanFrame::CanFrame()
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void uavcan::fill&lang;unsigned char*, unsigned char&rang;(T1, T1, const T2&)
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_stm32::CanIface::handleRxInterrupt(unsigned char, unsigned long long)
</UL>

<P><STRONG><a name="[10c]"></a>uavcan::CanFrame::CanFrame__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, uc_dispatcher.o(i._ZN6uavcan8CanFrameC1Ev), UNUSED)

<P><STRONG><a name="[9d]"></a>uavcan::DataTypeDescriptor::match(uavcan::DataTypeKind, const char*) const</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, uc_data_type.o(i._ZNK6uavcan18DataTypeDescriptor5matchENS_12DataTypeKindEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = uavcan::DataTypeDescriptor::match(uavcan::DataTypeKind, const char*) const &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::remove(uavcan::GlobalDataTypeRegistry::Entry*)
</UL>

<P><STRONG><a name="[95]"></a>uavcan::DataTypeDescriptor::isValid() const</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, uc_data_type.o(i._ZNK6uavcan18DataTypeDescriptor7isValidEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uavcan::DataTypeDescriptor::isValid() const &rArr; uavcan::DataTypeID::getMaxValueForDataTypeKind(uavcan::DataTypeKind)
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::DataTypeID::getMaxValueForDataTypeKind(uavcan::DataTypeKind)
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::registImpl(uavcan::GlobalDataTypeRegistry::Entry*)
</UL>

<P><STRONG><a name="[96]"></a>uavcan::GlobalDataTypeRegistry::selectList(uavcan::DataTypeKind) const</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uc_global_data_type_registry.o(i._ZNK6uavcan22GlobalDataTypeRegistry10selectListENS_12DataTypeKindE))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::remove(uavcan::GlobalDataTypeRegistry::Entry*)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::registImpl(uavcan::GlobalDataTypeRegistry::Entry*)
</UL>

<P><STRONG><a name="[e2]"></a>uavcan::GlobalDataTypeRegistry::EntryInsertionComparator::operator ()(const uavcan::GlobalDataTypeRegistry::Entry*) const</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, uc_global_data_type_registry.o(i._ZNK6uavcan22GlobalDataTypeRegistry24EntryInsertionComparatorclEPKNS0_5EntryE))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uavcan::GlobalDataTypeRegistry::EntryInsertionComparator::operator ()(const uavcan::GlobalDataTypeRegistry::Entry*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void uavcan::LinkedListRoot&lang;uavcan::GlobalDataTypeRegistry::Entry&rang;::insertBefore&lang;uavcan::GlobalDataTypeRegistry::EntryInsertionComparator&rang;(uavcan::GlobalDataTypeRegistry::Entry*, T1)
</UL>

<P><STRONG><a name="[ea]"></a>uavcan::GlobalDataTypeRegistry::isFrozen() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uc_stm32_can.o(i._ZNK6uavcan22GlobalDataTypeRegistry8isFrozenEv))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::debug::LogMessage_&lang;(int)0&rang;&rang;(uavcan::DataTypeID)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::GetTransportStats_&rang;(uavcan::DataTypeID)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::GetDataTypeInfo_&rang;(uavcan::DataTypeID)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::RestartNode_&rang;(uavcan::DataTypeID)
</UL>

<P><STRONG><a name="[9f]"></a>__cxa_guard_acquire</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cxa_guard_acquire.o(i.__cxa_guard_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::instance()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::dynamic_node_id::Allocation_&lang;(int)0&rang;&rang;(uavcan::DataTypeID)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::GetNodeInfo_&rang;(uavcan::DataTypeID)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::NodeStatus_&lang;(int)0&rang;&rang;(uavcan::DataTypeID)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::debug::LogMessage_&lang;(int)0&rang;&rang;(uavcan::DataTypeID)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::GetTransportStats_&rang;(uavcan::DataTypeID)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::GetDataTypeInfo_&rang;(uavcan::DataTypeID)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::RestartNode_&rang;(uavcan::DataTypeID)
</UL>

<P><STRONG><a name="[10d]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[10e]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[10f]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[65]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[45]"></a>main</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = main &rArr; MX_FREERTOS_Init() &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[63]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[7d]"></a>osDelay</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, cmsis_os.o(i.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask(const void*)
</UL>

<P><STRONG><a name="[af]"></a>osKernelStart</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = osKernelStart &rArr; vTaskStartScheduler &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[79]"></a>osSystickHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cmsis_os.o(i.osSystickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osSystickHandler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[7c]"></a>osThreadCreate</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, cmsis_os.o(i.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeFreeRtosPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init()
</UL>

<P><STRONG><a name="[d2]"></a>pvPortMalloc</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[cc]"></a>pxPortInitialiseStack</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[b7]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[cd]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>

<P><STRONG><a name="[cb]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[b9]"></a>vListInsert</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[b8]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[bb]"></a>vPortEnterCritical</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[bd]"></a>vPortExitCritical</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[c5]"></a>vPortFree</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[d9]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[d5]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, port.o(i.vPortValidateInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>

<P><STRONG><a name="[b0]"></a>vTaskDelay</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[d1]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[d7]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[de]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, tasks.o(i.vTaskSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[b1]"></a>vTaskStartScheduler</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = vTaskStartScheduler &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[bf]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[5e]"></a>vTaskSwitchContext</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[d8]"></a>xPortStartScheduler</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[b3]"></a>xPortSysTickHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, port.o(i.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
</UL>

<P><STRONG><a name="[ab]"></a>xQueueCreateMutex</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, queue.o(i.xQueueCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___18_uc_stm32_clock_cpp_87095aac
</UL>

<P><STRONG><a name="[dd]"></a>xQueueGenericCreate</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[c9]"></a>xQueueGenericReset</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[c7]"></a>xQueueGenericSend</STRONG> (Thumb, 420 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>

<P><STRONG><a name="[86]"></a>xQueueGiveFromISR</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, queue.o(i.xQueueGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_stm32::BusEvent::signalFromInterrupt()
</UL>

<P><STRONG><a name="[df]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[b5]"></a>xTaskCreate</STRONG> (Thumb, 96 bytes, Stack size 72 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[b2]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[dc]"></a>xTaskIncrementTick</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[c3]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[d0]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[c0]"></a>xTaskResumeAll</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[ac]"></a>uavcan::DurationBase&lang;uavcan::UtcDuration&rang;::fromMSec(long long)</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, uc_stm32_clock.o(t._ZN6uavcan12DurationBaseINS_11UtcDurationEE8fromMSecEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uavcan::DurationBase&lang;uavcan::UtcDuration&rang;::fromMSec(long long) &rArr; uavcan::DurationBase&lang;uavcan::UtcDuration&rang;::fromUSec(long long)
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::DurationBase&lang;uavcan::UtcDuration&rang;::fromUSec(long long)
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___18_uc_stm32_clock_cpp_87095aac
</UL>

<P><STRONG><a name="[e1]"></a>uavcan::DurationBase&lang;uavcan::UtcDuration&rang;::fromUSec(long long)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, uc_stm32_clock.o(t._ZN6uavcan12DurationBaseINS_11UtcDurationEE8fromUSecEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uavcan::DurationBase&lang;uavcan::UtcDuration&rang;::fromUSec(long long)
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::DurationBase&lang;uavcan::UtcDuration&rang;::fromMSec(long long)
</UL>

<P><STRONG><a name="[e3]"></a>uavcan::LinkedListNode&lang;uavcan::GlobalDataTypeRegistry::Entry&rang;::setNextListNode(uavcan::GlobalDataTypeRegistry::Entry*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uc_global_data_type_registry.o(t._ZN6uavcan14LinkedListNodeINS_22GlobalDataTypeRegistry5EntryEE15setNextListNodeEPS2_))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::LinkedListRoot&lang;uavcan::GlobalDataTypeRegistry::Entry&rang;::remove(const uavcan::GlobalDataTypeRegistry::Entry*)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void uavcan::LinkedListRoot&lang;uavcan::GlobalDataTypeRegistry::Entry&rang;::insertBefore&lang;uavcan::GlobalDataTypeRegistry::EntryInsertionComparator&rang;(uavcan::GlobalDataTypeRegistry::Entry*, T1)
</UL>

<P><STRONG><a name="[9a]"></a>void uavcan::LinkedListRoot&lang;uavcan::GlobalDataTypeRegistry::Entry&rang;::insertBefore&lang;uavcan::GlobalDataTypeRegistry::EntryInsertionComparator&rang;(uavcan::GlobalDataTypeRegistry::Entry*, T1)</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, uc_global_data_type_registry.o(t._ZN6uavcan14LinkedListRootINS_22GlobalDataTypeRegistry5EntryEE12insertBeforeINS1_24EntryInsertionComparatorEEEvPS2_T_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = void uavcan::LinkedListRoot&lang;uavcan::GlobalDataTypeRegistry::Entry&rang;::insertBefore&lang;uavcan::GlobalDataTypeRegistry::EntryInsertionComparator&rang;(uavcan::GlobalDataTypeRegistry::Entry*, T1) &rArr; uavcan::LinkedListRoot&lang;uavcan::GlobalDataTypeRegistry::Entry&rang;::remove(const uavcan::GlobalDataTypeRegistry::Entry*)
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::LinkedListNode&lang;uavcan::GlobalDataTypeRegistry::Entry&rang;::getNextListNode() const
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::LinkedListRoot&lang;uavcan::GlobalDataTypeRegistry::Entry&rang;::remove(const uavcan::GlobalDataTypeRegistry::Entry*)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::LinkedListNode&lang;uavcan::GlobalDataTypeRegistry::Entry&rang;::setNextListNode(uavcan::GlobalDataTypeRegistry::Entry*)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::EntryInsertionComparator::operator ()(const uavcan::GlobalDataTypeRegistry::Entry*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::registImpl(uavcan::GlobalDataTypeRegistry::Entry*)
</UL>

<P><STRONG><a name="[9c]"></a>uavcan::LinkedListRoot&lang;uavcan::GlobalDataTypeRegistry::Entry&rang;::remove(const uavcan::GlobalDataTypeRegistry::Entry*)</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, uc_global_data_type_registry.o(t._ZN6uavcan14LinkedListRootINS_22GlobalDataTypeRegistry5EntryEE6removeEPKS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uavcan::LinkedListRoot&lang;uavcan::GlobalDataTypeRegistry::Entry&rang;::remove(const uavcan::GlobalDataTypeRegistry::Entry*)
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::LinkedListNode&lang;uavcan::GlobalDataTypeRegistry::Entry&rang;::getNextListNode() const
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::LinkedListNode&lang;uavcan::GlobalDataTypeRegistry::Entry&rang;::setNextListNode(uavcan::GlobalDataTypeRegistry::Entry*)
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void uavcan::LinkedListRoot&lang;uavcan::GlobalDataTypeRegistry::Entry&rang;::insertBefore&lang;uavcan::GlobalDataTypeRegistry::EntryInsertionComparator&rang;(uavcan::GlobalDataTypeRegistry::Entry*, T1)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::remove(uavcan::GlobalDataTypeRegistry::Entry*)
</UL>

<P><STRONG><a name="[a0]"></a>uavcan::LinkedListRoot&lang;uavcan::GlobalDataTypeRegistry::Entry&rang;::LinkedListRoot()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uc_global_data_type_registry.o(t._ZN6uavcan14LinkedListRootINS_22GlobalDataTypeRegistry5EntryEEC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::instance()
</UL>

<P><STRONG><a name="[110]"></a>uavcan::LinkedListRoot&lang;uavcan::GlobalDataTypeRegistry::Entry&rang;::LinkedListRoot__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uc_global_data_type_registry.o(t._ZN6uavcan14LinkedListRootINS_22GlobalDataTypeRegistry5EntryEEC1Ev), UNUSED)

<P><STRONG><a name="[a4]"></a>uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::NodeStatus_&lang;(int)0&rang;&rang;(uavcan::DataTypeID)</STRONG> (Thumb, 148 bytes, Stack size 72 bytes, uc_node_status_provider.o(t._ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol11NodeStatus_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::NodeStatus_&lang;(int)0&rang;&rang;(uavcan::DataTypeID) &rArr; uavcan::GlobalDataTypeRegistry::registImpl(uavcan::GlobalDataTypeRegistry::Entry*) &rArr; void uavcan::LinkedListRoot&lang;uavcan::GlobalDataTypeRegistry::Entry&rang;::insertBefore&lang;uavcan::GlobalDataTypeRegistry::EntryInsertionComparator&rang;(uavcan::GlobalDataTypeRegistry::Entry*, T1) &rArr; uavcan::LinkedListRoot&lang;uavcan::GlobalDataTypeRegistry::Entry&rang;::remove(const uavcan::GlobalDataTypeRegistry::Entry*)
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::remove(uavcan::GlobalDataTypeRegistry::Entry*)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::registImpl(uavcan::GlobalDataTypeRegistry::Entry*)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::Entry::Entry()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::protocol::NodeStatus_&lang;(int)0&rang;::getDataTypeSignature()
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::DataTypeDescriptor::DataTypeDescriptor(uavcan::DataTypeKind, uavcan::DataTypeID, const uavcan::DataTypeSignature&, const char*)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___27_uc_node_status_provider_cpp_54b78f91
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___16_uc_stm32_can_cpp_7d6b3317
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___19_uc_stm32_thread_cpp_d810ad60
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___18_uc_stm32_clock_cpp_87095aac
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___22_acu_libuavcanSTM32_cpp_be63688e
</UL>

<P><STRONG><a name="[a6]"></a>uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::GetNodeInfo_&rang;(uavcan::DataTypeID)</STRONG> (Thumb, 238 bytes, Stack size 88 bytes, uc_node_status_provider.o(t._ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol12GetNodeInfo_EEENS0_18RegistrationResultENS_10DataTypeIDE))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::GetNodeInfo_&rang;(uavcan::DataTypeID) &rArr; uavcan::DataTypeSignature::extend(uavcan::DataTypeSignature) &rArr; uavcan::DataTypeSignature::mixin64(unsigned long long) &rArr; uavcan::DataTypeSignatureCRC::extend(unsigned long long)
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::remove(uavcan::GlobalDataTypeRegistry::Entry*)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::registImpl(uavcan::GlobalDataTypeRegistry::Entry*)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::Entry::Entry()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::DataTypeSignature::extend(uavcan::DataTypeSignature)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::protocol::SoftwareVersion_&lang;(int)0&rang;::getDataTypeSignature()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::protocol::HardwareVersion_&lang;(int)0&rang;::getDataTypeSignature()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::protocol::NodeStatus_&lang;(int)0&rang;::getDataTypeSignature()
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::DataTypeDescriptor::DataTypeDescriptor(uavcan::DataTypeKind, uavcan::DataTypeID, const uavcan::DataTypeSignature&, const char*)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::DataTypeSignature::DataTypeSignature(unsigned long long)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___27_uc_node_status_provider_cpp_54b78f91
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___16_uc_stm32_can_cpp_7d6b3317
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___19_uc_stm32_thread_cpp_d810ad60
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___18_uc_stm32_clock_cpp_87095aac
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___22_acu_libuavcanSTM32_cpp_be63688e
</UL>

<P><STRONG><a name="[a9]"></a>uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::RestartNode_&rang;(uavcan::DataTypeID)</STRONG> (Thumb, 174 bytes, Stack size 80 bytes, uc_stm32_can.o(t._ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol12RestartNode_EEENS0_18RegistrationResultENS_10DataTypeIDE))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::RestartNode_&rang;(uavcan::DataTypeID) &rArr; uavcan::GlobalDataTypeRegistry::registImpl(uavcan::GlobalDataTypeRegistry::Entry*) &rArr; void uavcan::LinkedListRoot&lang;uavcan::GlobalDataTypeRegistry::Entry&rang;::insertBefore&lang;uavcan::GlobalDataTypeRegistry::EntryInsertionComparator&rang;(uavcan::GlobalDataTypeRegistry::Entry*, T1) &rArr; uavcan::LinkedListRoot&lang;uavcan::GlobalDataTypeRegistry::Entry&rang;::remove(const uavcan::GlobalDataTypeRegistry::Entry*)
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::remove(uavcan::GlobalDataTypeRegistry::Entry*)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::registImpl(uavcan::GlobalDataTypeRegistry::Entry*)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::Entry::Entry()
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::DataTypeDescriptor::DataTypeDescriptor(uavcan::DataTypeKind, uavcan::DataTypeID, const uavcan::DataTypeSignature&, const char*)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::DataTypeSignature::DataTypeSignature(unsigned long long)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::isFrozen() const
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___16_uc_stm32_can_cpp_7d6b3317
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___19_uc_stm32_thread_cpp_d810ad60
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___18_uc_stm32_clock_cpp_87095aac
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___22_acu_libuavcanSTM32_cpp_be63688e
</UL>

<P><STRONG><a name="[ae]"></a>uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::dynamic_node_id::Allocation_&lang;(int)0&rang;&rang;(uavcan::DataTypeID)</STRONG> (Thumb, 162 bytes, Stack size 80 bytes, uc_dynamic_node_id_client.o(t._ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol15dynamic_node_id11Allocation_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::dynamic_node_id::Allocation_&lang;(int)0&rang;&rang;(uavcan::DataTypeID) &rArr; uavcan::GlobalDataTypeRegistry::registImpl(uavcan::GlobalDataTypeRegistry::Entry*) &rArr; void uavcan::LinkedListRoot&lang;uavcan::GlobalDataTypeRegistry::Entry&rang;::insertBefore&lang;uavcan::GlobalDataTypeRegistry::EntryInsertionComparator&rang;(uavcan::GlobalDataTypeRegistry::Entry*, T1) &rArr; uavcan::LinkedListRoot&lang;uavcan::GlobalDataTypeRegistry::Entry&rang;::remove(const uavcan::GlobalDataTypeRegistry::Entry*)
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::remove(uavcan::GlobalDataTypeRegistry::Entry*)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::registImpl(uavcan::GlobalDataTypeRegistry::Entry*)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::protocol::dynamic_node_id::Allocation_&lang;(int)0&rang;::getDataTypeSignature()
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::Entry::Entry()
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___29_uc_dynamic_node_id_client_cpp_fa4b5bf3
</UL>

<P><STRONG><a name="[a7]"></a>uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::GetDataTypeInfo_&rang;(uavcan::DataTypeID)</STRONG> (Thumb, 210 bytes, Stack size 80 bytes, uc_stm32_can.o(t._ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol16GetDataTypeInfo_EEENS0_18RegistrationResultENS_10DataTypeIDE))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::GetDataTypeInfo_&rang;(uavcan::DataTypeID) &rArr; uavcan::protocol::DataTypeKind_&lang;(int)0&rang;::extendDataTypeSignature(uavcan::DataTypeSignature&) &rArr; uavcan::DataTypeSignature::extend(uavcan::DataTypeSignature) &rArr; uavcan::DataTypeSignature::mixin64(unsigned long long) &rArr; uavcan::DataTypeSignatureCRC::extend(unsigned long long)
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::remove(uavcan::GlobalDataTypeRegistry::Entry*)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::registImpl(uavcan::GlobalDataTypeRegistry::Entry*)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::Entry::Entry()
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::DataTypeDescriptor::DataTypeDescriptor(uavcan::DataTypeKind, uavcan::DataTypeID, const uavcan::DataTypeSignature&, const char*)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::DataTypeSignature::DataTypeSignature(unsigned long long)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::protocol::DataTypeKind_&lang;(int)0&rang;::extendDataTypeSignature(uavcan::DataTypeSignature&)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::isFrozen() const
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___16_uc_stm32_can_cpp_7d6b3317
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___19_uc_stm32_thread_cpp_d810ad60
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___18_uc_stm32_clock_cpp_87095aac
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___22_acu_libuavcanSTM32_cpp_be63688e
</UL>

<P><STRONG><a name="[aa]"></a>uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::GetTransportStats_&rang;(uavcan::DataTypeID)</STRONG> (Thumb, 208 bytes, Stack size 88 bytes, uc_stm32_can.o(t._ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol18GetTransportStats_EEENS0_18RegistrationResultENS_10DataTypeIDE))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::GetTransportStats_&rang;(uavcan::DataTypeID) &rArr; uavcan::DataTypeSignature::extend(uavcan::DataTypeSignature) &rArr; uavcan::DataTypeSignature::mixin64(unsigned long long) &rArr; uavcan::DataTypeSignatureCRC::extend(unsigned long long)
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::remove(uavcan::GlobalDataTypeRegistry::Entry*)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::registImpl(uavcan::GlobalDataTypeRegistry::Entry*)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::Entry::Entry()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::DataTypeSignature::extend(uavcan::DataTypeSignature)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::DataTypeDescriptor::DataTypeDescriptor(uavcan::DataTypeKind, uavcan::DataTypeID, const uavcan::DataTypeSignature&, const char*)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::DataTypeSignature::DataTypeSignature(unsigned long long)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::protocol::CANIfaceStats_&lang;(int)0&rang;::getDataTypeSignature()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::isFrozen() const
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___16_uc_stm32_can_cpp_7d6b3317
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___19_uc_stm32_thread_cpp_d810ad60
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___18_uc_stm32_clock_cpp_87095aac
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___22_acu_libuavcanSTM32_cpp_be63688e
</UL>

<P><STRONG><a name="[a8]"></a>uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::debug::LogMessage_&lang;(int)0&rang;&rang;(uavcan::DataTypeID)</STRONG> (Thumb, 150 bytes, Stack size 72 bytes, uc_stm32_can.o(t._ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol5debug11LogMessage_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::debug::LogMessage_&lang;(int)0&rang;&rang;(uavcan::DataTypeID) &rArr; uavcan::protocol::debug::LogMessage_&lang;(int)0&rang;::getDataTypeSignature() &rArr; uavcan::DataTypeSignature::extend(uavcan::DataTypeSignature) &rArr; uavcan::DataTypeSignature::mixin64(unsigned long long) &rArr; uavcan::DataTypeSignatureCRC::extend(unsigned long long)
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::remove(uavcan::GlobalDataTypeRegistry::Entry*)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::registImpl(uavcan::GlobalDataTypeRegistry::Entry*)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::Entry::Entry()
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::DataTypeDescriptor::DataTypeDescriptor(uavcan::DataTypeKind, uavcan::DataTypeID, const uavcan::DataTypeSignature&, const char*)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::protocol::debug::LogMessage_&lang;(int)0&rang;::getDataTypeSignature()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::isFrozen() const
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___16_uc_stm32_can_cpp_7d6b3317
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___19_uc_stm32_thread_cpp_d810ad60
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___18_uc_stm32_clock_cpp_87095aac
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___22_acu_libuavcanSTM32_cpp_be63688e
</UL>

<P><STRONG><a name="[a2]"></a>void uavcan::fill&lang;unsigned char*, unsigned char&rang;(T1, T1, const T2&)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uc_bit_stream.o(t._ZN6uavcan4fillIPhhEEvT_S2_RKT0_))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::CanFrame::CanFrame()
</UL>

<P><STRONG><a name="[e5]"></a>uavcan::protocol::NodeStatus_&lang;(int)0&rang;::getDataTypeSignature()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uc_node_status_provider.o(t._ZN6uavcan8protocol11NodeStatus_ILi0EE20getDataTypeSignatureEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uavcan::protocol::NodeStatus_&lang;(int)0&rang;::getDataTypeSignature()
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::DataTypeSignature::DataTypeSignature(unsigned long long)
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::GetNodeInfo_&rang;(uavcan::DataTypeID)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::NodeStatus_&lang;(int)0&rang;&rang;(uavcan::DataTypeID)
</UL>

<P><STRONG><a name="[ef]"></a>uavcan::protocol::DataTypeKind_&lang;(int)0&rang;::getDataTypeSignature()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, uc_stm32_can.o(t._ZN6uavcan8protocol13DataTypeKind_ILi0EE20getDataTypeSignatureEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uavcan::protocol::DataTypeKind_&lang;(int)0&rang;::getDataTypeSignature()
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::DataTypeSignature::DataTypeSignature(unsigned long long)
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::protocol::DataTypeKind_&lang;(int)0&rang;::extendDataTypeSignature(uavcan::DataTypeSignature&)
</UL>

<P><STRONG><a name="[ec]"></a>uavcan::protocol::DataTypeKind_&lang;(int)0&rang;::extendDataTypeSignature(uavcan::DataTypeSignature&)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, uc_stm32_can.o(t._ZN6uavcan8protocol13DataTypeKind_ILi0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = uavcan::protocol::DataTypeKind_&lang;(int)0&rang;::extendDataTypeSignature(uavcan::DataTypeSignature&) &rArr; uavcan::DataTypeSignature::extend(uavcan::DataTypeSignature) &rArr; uavcan::DataTypeSignature::mixin64(unsigned long long) &rArr; uavcan::DataTypeSignatureCRC::extend(unsigned long long)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::DataTypeSignature::extend(uavcan::DataTypeSignature)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::protocol::DataTypeKind_&lang;(int)0&rang;::getDataTypeSignature()
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::GetDataTypeInfo_&rang;(uavcan::DataTypeID)
</UL>

<P><STRONG><a name="[ed]"></a>uavcan::protocol::CANIfaceStats_&lang;(int)0&rang;::getDataTypeSignature()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, uc_stm32_can.o(t._ZN6uavcan8protocol14CANIfaceStats_ILi0EE20getDataTypeSignatureEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uavcan::protocol::CANIfaceStats_&lang;(int)0&rang;::getDataTypeSignature()
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::DataTypeSignature::DataTypeSignature(unsigned long long)
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::GetTransportStats_&rang;(uavcan::DataTypeID)
</UL>

<P><STRONG><a name="[eb]"></a>uavcan::protocol::dynamic_node_id::Allocation_&lang;(int)0&rang;::getDataTypeSignature()</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, uc_dynamic_node_id_client.o(t._ZN6uavcan8protocol15dynamic_node_id11Allocation_ILi0EE20getDataTypeSignatureEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uavcan::protocol::dynamic_node_id::Allocation_&lang;(int)0&rang;::getDataTypeSignature()
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::dynamic_node_id::Allocation_&lang;(int)0&rang;&rang;(uavcan::DataTypeID)
</UL>

<P><STRONG><a name="[e9]"></a>uavcan::protocol::HardwareVersion_&lang;(int)0&rang;::getDataTypeSignature()</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, uc_node_status_provider.o(t._ZN6uavcan8protocol16HardwareVersion_ILi0EE20getDataTypeSignatureEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uavcan::protocol::HardwareVersion_&lang;(int)0&rang;::getDataTypeSignature()
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::DataTypeSignature::DataTypeSignature(unsigned long long)
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::GetNodeInfo_&rang;(uavcan::DataTypeID)
</UL>

<P><STRONG><a name="[e8]"></a>uavcan::protocol::SoftwareVersion_&lang;(int)0&rang;::getDataTypeSignature()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uc_node_status_provider.o(t._ZN6uavcan8protocol16SoftwareVersion_ILi0EE20getDataTypeSignatureEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uavcan::protocol::SoftwareVersion_&lang;(int)0&rang;::getDataTypeSignature()
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::DataTypeSignature::DataTypeSignature(unsigned long long)
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::GetNodeInfo_&rang;(uavcan::DataTypeID)
</UL>

<P><STRONG><a name="[ee]"></a>uavcan::protocol::debug::LogMessage_&lang;(int)0&rang;::getDataTypeSignature()</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, uc_stm32_can.o(t._ZN6uavcan8protocol5debug11LogMessage_ILi0EE20getDataTypeSignatureEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = uavcan::protocol::debug::LogMessage_&lang;(int)0&rang;::getDataTypeSignature() &rArr; uavcan::DataTypeSignature::extend(uavcan::DataTypeSignature) &rArr; uavcan::DataTypeSignature::mixin64(unsigned long long) &rArr; uavcan::DataTypeSignatureCRC::extend(unsigned long long)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::DataTypeSignature::extend(uavcan::DataTypeSignature)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::DataTypeSignature::DataTypeSignature(unsigned long long)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::protocol::debug::LogLevel_&lang;(int)0&rang;::getDataTypeSignature()
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::debug::LogMessage_&lang;(int)0&rang;&rang;(uavcan::DataTypeID)
</UL>

<P><STRONG><a name="[f0]"></a>uavcan::protocol::debug::LogLevel_&lang;(int)0&rang;::getDataTypeSignature()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, uc_stm32_can.o(t._ZN6uavcan8protocol5debug9LogLevel_ILi0EE20getDataTypeSignatureEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uavcan::protocol::debug::LogLevel_&lang;(int)0&rang;::getDataTypeSignature()
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::DataTypeSignature::DataTypeSignature(unsigned long long)
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::protocol::debug::LogMessage_&lang;(int)0&rang;::getDataTypeSignature()
</UL>

<P><STRONG><a name="[99]"></a>uavcan::LinkedListNode&lang;uavcan::GlobalDataTypeRegistry::Entry&rang;::getNextListNode() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uc_global_data_type_registry.o(t._ZNK6uavcan14LinkedListNodeINS_22GlobalDataTypeRegistry5EntryEE15getNextListNodeEv))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::LinkedListRoot&lang;uavcan::GlobalDataTypeRegistry::Entry&rang;::remove(const uavcan::GlobalDataTypeRegistry::Entry*)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void uavcan::LinkedListRoot&lang;uavcan::GlobalDataTypeRegistry::Entry&rang;::insertBefore&lang;uavcan::GlobalDataTypeRegistry::EntryInsertionComparator&rang;(uavcan::GlobalDataTypeRegistry::Entry*, T1)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::remove(uavcan::GlobalDataTypeRegistry::Entry*)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::registImpl(uavcan::GlobalDataTypeRegistry::Entry*)
</UL>

<P><STRONG><a name="[97]"></a>uavcan::LinkedListRoot&lang;uavcan::GlobalDataTypeRegistry::Entry&rang;::get() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uc_global_data_type_registry.o(t._ZNK6uavcan14LinkedListRootINS_22GlobalDataTypeRegistry5EntryEE3getEv))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::remove(uavcan::GlobalDataTypeRegistry::Entry*)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::registImpl(uavcan::GlobalDataTypeRegistry::Entry*)
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[d3]"></a>prvHeapInit</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[d4]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[c2]"></a>prvCopyDataToQueue</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[c6]"></a>prvInitialiseMutex</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, queue.o(i.prvInitialiseMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[c8]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[ce]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueFull
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[cf]"></a>prvUnlockQueue</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[b4]"></a>makeFreeRtosPriority</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cmsis_os.o(i.makeFreeRtosPriority))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[b6]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[ba]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[be]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[c1]"></a>prvDeleteTCB</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[4d]"></a>prvIdleTask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[ca]"></a>prvInitialiseNewTask</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[bc]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[e0]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[4c]"></a>prvTaskExitError</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[70]"></a>NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f3xx_hal_cortex.o(i.NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[71]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f3xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[50]"></a>__sti___29_uc_dynamic_node_id_client_cpp_fa4b5bf3</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, uc_dynamic_node_id_client.o(i.__sti___29_uc_dynamic_node_id_client_cpp_fa4b5bf3))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __sti___29_uc_dynamic_node_id_client_cpp_fa4b5bf3 &rArr; uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::dynamic_node_id::Allocation_&lang;(int)0&rang;&rang;(uavcan::DataTypeID) &rArr; uavcan::GlobalDataTypeRegistry::registImpl(uavcan::GlobalDataTypeRegistry::Entry*) &rArr; void uavcan::LinkedListRoot&lang;uavcan::GlobalDataTypeRegistry::Entry&rang;::insertBefore&lang;uavcan::GlobalDataTypeRegistry::EntryInsertionComparator&rang;(uavcan::GlobalDataTypeRegistry::Entry*, T1) &rArr; uavcan::LinkedListRoot&lang;uavcan::GlobalDataTypeRegistry::Entry&rang;::remove(const uavcan::GlobalDataTypeRegistry::Entry*)
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::instance()
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::handleFatalError(const char*)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::dynamic_node_id::Allocation_&lang;(int)0&rang;&rang;(uavcan::DataTypeID)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uc_dynamic_node_id_client.o(.init_array)
</UL>
<P><STRONG><a name="[51]"></a>__sti___27_uc_node_status_provider_cpp_54b78f91</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, uc_node_status_provider.o(i.__sti___27_uc_node_status_provider_cpp_54b78f91))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __sti___27_uc_node_status_provider_cpp_54b78f91 &rArr; uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::GetNodeInfo_&rang;(uavcan::DataTypeID) &rArr; uavcan::DataTypeSignature::extend(uavcan::DataTypeSignature) &rArr; uavcan::DataTypeSignature::mixin64(unsigned long long) &rArr; uavcan::DataTypeSignatureCRC::extend(unsigned long long)
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::instance()
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::handleFatalError(const char*)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::GetNodeInfo_&rang;(uavcan::DataTypeID)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::NodeStatus_&lang;(int)0&rang;&rang;(uavcan::DataTypeID)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::DataTypeID::DataTypeID(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uc_node_status_provider.o(.init_array)
</UL>
<P><STRONG><a name="[52]"></a>__sti___33_uc_outgoing_transfer_registry_cpp_e869a750</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, uc_outgoing_transfer_registry.o(i.__sti___33_uc_outgoing_transfer_registry_cpp_e869a750))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = __sti___33_uc_outgoing_transfer_registry_cpp_e869a750 &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uc_outgoing_transfer_registry.o(.init_array)
</UL>
<P><STRONG><a name="[53]"></a>__sti___15_uc_transfer_cpp_49afa4ea</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, uc_transfer.o(i.__sti___15_uc_transfer_cpp_49afa4ea))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sti___15_uc_transfer_cpp_49afa4ea
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::TransferPriority::TransferPriority(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uc_transfer.o(.init_array)
</UL>
<P><STRONG><a name="[67]"></a>uavcan_stm32::&lang;unnamed namespace _16_uc_stm32_can_cpp_7d6b3317&rang;::handleRxInterrupt(unsigned char, unsigned char)</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, uc_stm32_can.o(i._ZN12uavcan_stm3240_GLOBAL__N__16_uc_stm32_can_cpp_7d6b331717handleRxInterruptEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = uavcan_stm32::&lang;unnamed namespace _16_uc_stm32_can_cpp_7d6b3317&rang;::handleRxInterrupt(unsigned char, unsigned char) &rArr; uavcan_stm32::CanIface::handleRxInterrupt(unsigned char, unsigned long long) &rArr; uavcan_stm32::BusEvent::signalFromInterrupt() &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_stm32::clock::getUtcUSecFromCanInterrupt()
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_stm32::CanIface::handleRxInterrupt(unsigned char, unsigned long long)
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_RX1_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_RX0_IRQHandler
</UL>

<P><STRONG><a name="[54]"></a>__sti___16_uc_stm32_can_cpp_7d6b3317</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, uc_stm32_can.o(i.__sti___16_uc_stm32_can_cpp_7d6b3317))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = __sti___16_uc_stm32_can_cpp_7d6b3317 &rArr; uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::debug::LogMessage_&lang;(int)0&rang;&rang;(uavcan::DataTypeID) &rArr; uavcan::protocol::debug::LogMessage_&lang;(int)0&rang;::getDataTypeSignature() &rArr; uavcan::DataTypeSignature::extend(uavcan::DataTypeSignature) &rArr; uavcan::DataTypeSignature::mixin64(unsigned long long) &rArr; uavcan::DataTypeSignatureCRC::extend(unsigned long long)
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::instance()
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::handleFatalError(const char*)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::GetNodeInfo_&rang;(uavcan::DataTypeID)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::NodeStatus_&lang;(int)0&rang;&rang;(uavcan::DataTypeID)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::DataTypeID::DataTypeID(unsigned short)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::debug::LogMessage_&lang;(int)0&rang;&rang;(uavcan::DataTypeID)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::GetTransportStats_&rang;(uavcan::DataTypeID)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::GetDataTypeInfo_&rang;(uavcan::DataTypeID)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::RestartNode_&rang;(uavcan::DataTypeID)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uc_stm32_can.o(.init_array)
</UL>
<P><STRONG><a name="[55]"></a>__sti___19_uc_stm32_thread_cpp_d810ad60</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, uc_stm32_thread.o(i.__sti___19_uc_stm32_thread_cpp_d810ad60))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = __sti___19_uc_stm32_thread_cpp_d810ad60 &rArr; uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::debug::LogMessage_&lang;(int)0&rang;&rang;(uavcan::DataTypeID) &rArr; uavcan::protocol::debug::LogMessage_&lang;(int)0&rang;::getDataTypeSignature() &rArr; uavcan::DataTypeSignature::extend(uavcan::DataTypeSignature) &rArr; uavcan::DataTypeSignature::mixin64(unsigned long long) &rArr; uavcan::DataTypeSignatureCRC::extend(unsigned long long)
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::instance()
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::handleFatalError(const char*)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::GetNodeInfo_&rang;(uavcan::DataTypeID)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::NodeStatus_&lang;(int)0&rang;&rang;(uavcan::DataTypeID)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::DataTypeID::DataTypeID(unsigned short)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::debug::LogMessage_&lang;(int)0&rang;&rang;(uavcan::DataTypeID)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::GetTransportStats_&rang;(uavcan::DataTypeID)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::GetDataTypeInfo_&rang;(uavcan::DataTypeID)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::RestartNode_&rang;(uavcan::DataTypeID)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uc_stm32_thread.o(.init_array)
</UL>
<P><STRONG><a name="[84]"></a>[local to uc_stm32_clock_cpp]::uavcan_stm32::clock::sampleUtcFromCriticalSection()</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, uc_stm32_clock.o(i._ZN40_INTERNAL_18_uc_stm32_clock_cpp_87095aac12uavcan_stm325clock28sampleUtcFromCriticalSectionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = [local to uc_stm32_clock_cpp]::uavcan_stm32::clock::sampleUtcFromCriticalSection()
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_stm32::clock::getUtcUSecFromCanInterrupt()
</UL>

<P><STRONG><a name="[56]"></a>__sti___18_uc_stm32_clock_cpp_87095aac</STRONG> (Thumb, 332 bytes, Stack size 24 bytes, uc_stm32_clock.o(i.__sti___18_uc_stm32_clock_cpp_87095aac))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = __sti___18_uc_stm32_clock_cpp_87095aac &rArr; uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::debug::LogMessage_&lang;(int)0&rang;&rang;(uavcan::DataTypeID) &rArr; uavcan::protocol::debug::LogMessage_&lang;(int)0&rang;::getDataTypeSignature() &rArr; uavcan::DataTypeSignature::extend(uavcan::DataTypeSignature) &rArr; uavcan::DataTypeSignature::mixin64(unsigned long long) &rArr; uavcan::DataTypeSignatureCRC::extend(unsigned long long)
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::instance()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::MonotonicTime::MonotonicTime()
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::handleFatalError(const char*)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::GetNodeInfo_&rang;(uavcan::DataTypeID)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::NodeStatus_&lang;(int)0&rang;&rang;(uavcan::DataTypeID)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::DataTypeID::DataTypeID(unsigned short)
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::debug::LogMessage_&lang;(int)0&rang;&rang;(uavcan::DataTypeID)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::GetTransportStats_&rang;(uavcan::DataTypeID)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::GetDataTypeInfo_&rang;(uavcan::DataTypeID)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::RestartNode_&rang;(uavcan::DataTypeID)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::DurationBase&lang;uavcan::UtcDuration&rang;::fromMSec(long long)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uc_stm32_clock.o(.init_array)
</UL>
<P><STRONG><a name="[57]"></a>__sti___22_acu_libuavcanSTM32_cpp_be63688e</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, acu_libuavcanstm32.o(i.__sti___22_acu_libuavcanSTM32_cpp_be63688e))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = __sti___22_acu_libuavcanSTM32_cpp_be63688e &rArr; uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::debug::LogMessage_&lang;(int)0&rang;&rang;(uavcan::DataTypeID) &rArr; uavcan::protocol::debug::LogMessage_&lang;(int)0&rang;::getDataTypeSignature() &rArr; uavcan::DataTypeSignature::extend(uavcan::DataTypeSignature) &rArr; uavcan::DataTypeSignature::mixin64(unsigned long long) &rArr; uavcan::DataTypeSignatureCRC::extend(unsigned long long)
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::instance()
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::handleFatalError(const char*)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::GetNodeInfo_&rang;(uavcan::DataTypeID)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::NodeStatus_&lang;(int)0&rang;&rang;(uavcan::DataTypeID)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::DataTypeID::DataTypeID(unsigned short)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::debug::LogMessage_&lang;(int)0&rang;&rang;(uavcan::DataTypeID)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::GetTransportStats_&rang;(uavcan::DataTypeID)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::GetDataTypeInfo_&rang;(uavcan::DataTypeID)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan::GlobalDataTypeRegistry::RegistrationResult uavcan::GlobalDataTypeRegistry::registerDataType&lang;uavcan::protocol::RestartNode_&rang;(uavcan::DataTypeID)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> acu_libuavcanstm32.o(.init_array)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
