/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: C:\Users\Marko\Documents\Development\morus_fuel_sensor\morus_uavcan_msgs\actuator\gas_motor\2016.ThrottleReference.uavcan
 */

#ifndef MORUS_UAVCAN_MSGS_ACTUATOR_GAS_MOTOR_THROTTLEREFERENCE_HPP_INCLUDED
#define MORUS_UAVCAN_MSGS_ACTUATOR_GAS_MOTOR_THROTTLEREFERENCE_HPP_INCLUDED

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

/******************************* Source text **********************************
#
# Message for controlling throttle of a gass motor
#

#
# Motor ID defines
#
uint8 FRONT = 0
uint8 RIGHT = 1
uint8 BACK = 2
uint8 LEFT = 3

float32[4] throttle		# throttle value (range 0-1)
******************************************************************************/

/********************* DSDL signature source definition ***********************
morus_uavcan_msgs.actuator.gas_motor.ThrottleReference
saturated float32[4] throttle
******************************************************************************/

#undef throttle
#undef FRONT
#undef RIGHT
#undef BACK
#undef LEFT

namespace morus_uavcan_msgs
{
namespace actuator
{
namespace gas_motor
{

template <int _tmpl>
struct UAVCAN_EXPORT ThrottleReference_
{
    typedef const ThrottleReference_<_tmpl>& ParameterType;
    typedef ThrottleReference_<_tmpl>& ReferenceType;

    struct ConstantTypes
    {
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > FRONT;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > RIGHT;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > BACK;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > LEFT;
    };

    struct FieldTypes
    {
        typedef ::uavcan::Array< ::uavcan::FloatSpec< 32, ::uavcan::CastModeSaturate >, ::uavcan::ArrayModeStatic, 4 > throttle;
    };

    enum
    {
        MinBitLen
            = FieldTypes::throttle::MinBitLen
    };

    enum
    {
        MaxBitLen
            = FieldTypes::throttle::MaxBitLen
    };

    // Constants
    static const typename ::uavcan::StorageType< typename ConstantTypes::FRONT >::Type FRONT; // 0
    static const typename ::uavcan::StorageType< typename ConstantTypes::RIGHT >::Type RIGHT; // 1
    static const typename ::uavcan::StorageType< typename ConstantTypes::BACK >::Type BACK; // 2
    static const typename ::uavcan::StorageType< typename ConstantTypes::LEFT >::Type LEFT; // 3

    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::throttle >::Type throttle;

    ThrottleReference_()
        : throttle()
    {
        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

#if UAVCAN_DEBUG
        /*
         * Cross-checking MaxBitLen provided by the DSDL compiler.
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<128 == MaxBitLen>::check();
#endif
    }

    bool operator==(ParameterType rhs) const;
    bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

    /**
     * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
     * floating point fields at any depth.
     */
    bool isClose(ParameterType rhs) const;

    static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindMessage };
    enum { DefaultDataTypeID = 2016 };

    static const char* getDataTypeFullName()
    {
        return "morus_uavcan_msgs.actuator.gas_motor.ThrottleReference";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

};

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool ThrottleReference_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        throttle == rhs.throttle;
}

template <int _tmpl>
bool ThrottleReference_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(throttle, rhs.throttle);
}

template <int _tmpl>
int ThrottleReference_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::throttle::encode(self.throttle, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int ThrottleReference_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::throttle::decode(self.throttle, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature ThrottleReference_<_tmpl>::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0x38BC077F5210BE2DULL);

    FieldTypes::throttle::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

template <int _tmpl>
const typename ::uavcan::StorageType< typename ThrottleReference_<_tmpl>::ConstantTypes::FRONT >::Type
    ThrottleReference_<_tmpl>::FRONT = 0U; // 0

template <int _tmpl>
const typename ::uavcan::StorageType< typename ThrottleReference_<_tmpl>::ConstantTypes::RIGHT >::Type
    ThrottleReference_<_tmpl>::RIGHT = 1U; // 1

template <int _tmpl>
const typename ::uavcan::StorageType< typename ThrottleReference_<_tmpl>::ConstantTypes::BACK >::Type
    ThrottleReference_<_tmpl>::BACK = 2U; // 2

template <int _tmpl>
const typename ::uavcan::StorageType< typename ThrottleReference_<_tmpl>::ConstantTypes::LEFT >::Type
    ThrottleReference_<_tmpl>::LEFT = 3U; // 3

/*
 * Final typedef
 */
typedef ThrottleReference_<0> ThrottleReference;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::morus_uavcan_msgs::actuator::gas_motor::ThrottleReference > _uavcan_gdtr_registrator_ThrottleReference;

}

} // Namespace gas_motor
} // Namespace actuator
} // Namespace morus_uavcan_msgs

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::morus_uavcan_msgs::actuator::gas_motor::ThrottleReference >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::morus_uavcan_msgs::actuator::gas_motor::ThrottleReference::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::morus_uavcan_msgs::actuator::gas_motor::ThrottleReference >::stream(Stream& s, ::morus_uavcan_msgs::actuator::gas_motor::ThrottleReference::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "throttle: ";
    YamlStreamer< ::morus_uavcan_msgs::actuator::gas_motor::ThrottleReference::FieldTypes::throttle >::stream(s, obj.throttle, level + 1);
}

}

namespace morus_uavcan_msgs
{
namespace actuator
{
namespace gas_motor
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::morus_uavcan_msgs::actuator::gas_motor::ThrottleReference::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::morus_uavcan_msgs::actuator::gas_motor::ThrottleReference >::stream(s, obj, 0);
    return s;
}

} // Namespace gas_motor
} // Namespace actuator
} // Namespace morus_uavcan_msgs

#endif // MORUS_UAVCAN_MSGS_ACTUATOR_GAS_MOTOR_THROTTLEREFERENCE_HPP_INCLUDED