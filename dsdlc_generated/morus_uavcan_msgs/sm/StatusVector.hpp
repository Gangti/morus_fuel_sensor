/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: C:\Users\Marko\Documents\Development\morus_fuel_sensor\morus_uavcan_msgs\sm\2070.StatusVector.uavcan
 */

#ifndef MORUS_UAVCAN_MSGS_SM_STATUSVECTOR_HPP_INCLUDED
#define MORUS_UAVCAN_MSGS_SM_STATUSVECTOR_HPP_INCLUDED

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

/******************************* Source text **********************************
#
#
#

uint8[10] out_of_range_vector
uint8[10] dont_change_vector
uint8[10] comm_timeout_vector
******************************************************************************/

/********************* DSDL signature source definition ***********************
morus_uavcan_msgs.sm.StatusVector
saturated uint8[10] out_of_range_vector
saturated uint8[10] dont_change_vector
saturated uint8[10] comm_timeout_vector
******************************************************************************/

#undef out_of_range_vector
#undef dont_change_vector
#undef comm_timeout_vector

namespace morus_uavcan_msgs
{
namespace sm
{

template <int _tmpl>
struct UAVCAN_EXPORT StatusVector_
{
    typedef const StatusVector_<_tmpl>& ParameterType;
    typedef StatusVector_<_tmpl>& ReferenceType;

    struct ConstantTypes
    {
    };

    struct FieldTypes
    {
        typedef ::uavcan::Array< ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate >, ::uavcan::ArrayModeStatic, 10 > out_of_range_vector;
        typedef ::uavcan::Array< ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate >, ::uavcan::ArrayModeStatic, 10 > dont_change_vector;
        typedef ::uavcan::Array< ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate >, ::uavcan::ArrayModeStatic, 10 > comm_timeout_vector;
    };

    enum
    {
        MinBitLen
            = FieldTypes::out_of_range_vector::MinBitLen
            + FieldTypes::dont_change_vector::MinBitLen
            + FieldTypes::comm_timeout_vector::MinBitLen
    };

    enum
    {
        MaxBitLen
            = FieldTypes::out_of_range_vector::MaxBitLen
            + FieldTypes::dont_change_vector::MaxBitLen
            + FieldTypes::comm_timeout_vector::MaxBitLen
    };

    // Constants

    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::out_of_range_vector >::Type out_of_range_vector;
    typename ::uavcan::StorageType< typename FieldTypes::dont_change_vector >::Type dont_change_vector;
    typename ::uavcan::StorageType< typename FieldTypes::comm_timeout_vector >::Type comm_timeout_vector;

    StatusVector_()
        : out_of_range_vector()
        , dont_change_vector()
        , comm_timeout_vector()
    {
        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

#if UAVCAN_DEBUG
        /*
         * Cross-checking MaxBitLen provided by the DSDL compiler.
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<240 == MaxBitLen>::check();
#endif
    }

    bool operator==(ParameterType rhs) const;
    bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

    /**
     * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
     * floating point fields at any depth.
     */
    bool isClose(ParameterType rhs) const;

    static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindMessage };
    enum { DefaultDataTypeID = 2070 };

    static const char* getDataTypeFullName()
    {
        return "morus_uavcan_msgs.sm.StatusVector";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

};

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool StatusVector_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        out_of_range_vector == rhs.out_of_range_vector &&
        dont_change_vector == rhs.dont_change_vector &&
        comm_timeout_vector == rhs.comm_timeout_vector;
}

template <int _tmpl>
bool StatusVector_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(out_of_range_vector, rhs.out_of_range_vector) &&
        ::uavcan::areClose(dont_change_vector, rhs.dont_change_vector) &&
        ::uavcan::areClose(comm_timeout_vector, rhs.comm_timeout_vector);
}

template <int _tmpl>
int StatusVector_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::out_of_range_vector::encode(self.out_of_range_vector, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::dont_change_vector::encode(self.dont_change_vector, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::comm_timeout_vector::encode(self.comm_timeout_vector, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int StatusVector_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::out_of_range_vector::decode(self.out_of_range_vector, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::dont_change_vector::decode(self.dont_change_vector, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::comm_timeout_vector::decode(self.comm_timeout_vector, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature StatusVector_<_tmpl>::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0x8EA2FD786FBE2173ULL);

    FieldTypes::out_of_range_vector::extendDataTypeSignature(signature);
    FieldTypes::dont_change_vector::extendDataTypeSignature(signature);
    FieldTypes::comm_timeout_vector::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

/*
 * Final typedef
 */
typedef StatusVector_<0> StatusVector;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::morus_uavcan_msgs::sm::StatusVector > _uavcan_gdtr_registrator_StatusVector;

}

} // Namespace sm
} // Namespace morus_uavcan_msgs

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::morus_uavcan_msgs::sm::StatusVector >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::morus_uavcan_msgs::sm::StatusVector::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::morus_uavcan_msgs::sm::StatusVector >::stream(Stream& s, ::morus_uavcan_msgs::sm::StatusVector::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "out_of_range_vector: ";
    YamlStreamer< ::morus_uavcan_msgs::sm::StatusVector::FieldTypes::out_of_range_vector >::stream(s, obj.out_of_range_vector, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "dont_change_vector: ";
    YamlStreamer< ::morus_uavcan_msgs::sm::StatusVector::FieldTypes::dont_change_vector >::stream(s, obj.dont_change_vector, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "comm_timeout_vector: ";
    YamlStreamer< ::morus_uavcan_msgs::sm::StatusVector::FieldTypes::comm_timeout_vector >::stream(s, obj.comm_timeout_vector, level + 1);
}

}

namespace morus_uavcan_msgs
{
namespace sm
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::morus_uavcan_msgs::sm::StatusVector::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::morus_uavcan_msgs::sm::StatusVector >::stream(s, obj, 0);
    return s;
}

} // Namespace sm
} // Namespace morus_uavcan_msgs

#endif // MORUS_UAVCAN_MSGS_SM_STATUSVECTOR_HPP_INCLUDED