/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: C:\Users\Marko\Documents\Development\morus_fuel_sensor\morus_uavcan_msgs\control\position_control\2050.Status.uavcan
 */

#ifndef MORUS_UAVCAN_MSGS_CONTROL_POSITION_CONTROL_STATUS_HPP_INCLUDED
#define MORUS_UAVCAN_MSGS_CONTROL_POSITION_CONTROL_STATUS_HPP_INCLUDED

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

#include <morus_uavcan_msgs\control\PidStatus.hpp>
#include <uavcan\Timestamp.hpp>

/******************************* Source text **********************************
#
# Add comment.
#

uavcan.Timestamp timestamp

morus_uavcan_msgs.control.PidStatus x
morus_uavcan_msgs.control.PidStatus vx
morus_uavcan_msgs.control.PidStatus y
morus_uavcan_msgs.control.PidStatus vy
morus_uavcan_msgs.control.PidStatus z
morus_uavcan_msgs.control.PidStatus vz
******************************************************************************/

/********************* DSDL signature source definition ***********************
morus_uavcan_msgs.control.position_control.Status
uavcan.Timestamp timestamp
morus_uavcan_msgs.control.PidStatus x
morus_uavcan_msgs.control.PidStatus vx
morus_uavcan_msgs.control.PidStatus y
morus_uavcan_msgs.control.PidStatus vy
morus_uavcan_msgs.control.PidStatus z
morus_uavcan_msgs.control.PidStatus vz
******************************************************************************/

#undef timestamp
#undef x
#undef vx
#undef y
#undef vy
#undef z
#undef vz

namespace morus_uavcan_msgs
{
namespace control
{
namespace position_control
{

template <int _tmpl>
struct UAVCAN_EXPORT Status_
{
    typedef const Status_<_tmpl>& ParameterType;
    typedef Status_<_tmpl>& ReferenceType;

    struct ConstantTypes
    {
    };

    struct FieldTypes
    {
        typedef ::uavcan::Timestamp timestamp;
        typedef ::morus_uavcan_msgs::control::PidStatus x;
        typedef ::morus_uavcan_msgs::control::PidStatus vx;
        typedef ::morus_uavcan_msgs::control::PidStatus y;
        typedef ::morus_uavcan_msgs::control::PidStatus vy;
        typedef ::morus_uavcan_msgs::control::PidStatus z;
        typedef ::morus_uavcan_msgs::control::PidStatus vz;
    };

    enum
    {
        MinBitLen
            = FieldTypes::timestamp::MinBitLen
            + FieldTypes::x::MinBitLen
            + FieldTypes::vx::MinBitLen
            + FieldTypes::y::MinBitLen
            + FieldTypes::vy::MinBitLen
            + FieldTypes::z::MinBitLen
            + FieldTypes::vz::MinBitLen
    };

    enum
    {
        MaxBitLen
            = FieldTypes::timestamp::MaxBitLen
            + FieldTypes::x::MaxBitLen
            + FieldTypes::vx::MaxBitLen
            + FieldTypes::y::MaxBitLen
            + FieldTypes::vy::MaxBitLen
            + FieldTypes::z::MaxBitLen
            + FieldTypes::vz::MaxBitLen
    };

    // Constants

    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::timestamp >::Type timestamp;
    typename ::uavcan::StorageType< typename FieldTypes::x >::Type x;
    typename ::uavcan::StorageType< typename FieldTypes::vx >::Type vx;
    typename ::uavcan::StorageType< typename FieldTypes::y >::Type y;
    typename ::uavcan::StorageType< typename FieldTypes::vy >::Type vy;
    typename ::uavcan::StorageType< typename FieldTypes::z >::Type z;
    typename ::uavcan::StorageType< typename FieldTypes::vz >::Type vz;

    Status_()
        : timestamp()
        , x()
        , vx()
        , y()
        , vy()
        , z()
        , vz()
    {
        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

#if UAVCAN_DEBUG
        /*
         * Cross-checking MaxBitLen provided by the DSDL compiler.
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<632 == MaxBitLen>::check();
#endif
    }

    bool operator==(ParameterType rhs) const;
    bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

    /**
     * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
     * floating point fields at any depth.
     */
    bool isClose(ParameterType rhs) const;

    static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindMessage };
    enum { DefaultDataTypeID = 2050 };

    static const char* getDataTypeFullName()
    {
        return "morus_uavcan_msgs.control.position_control.Status";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

};

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool Status_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        timestamp == rhs.timestamp &&
        x == rhs.x &&
        vx == rhs.vx &&
        y == rhs.y &&
        vy == rhs.vy &&
        z == rhs.z &&
        vz == rhs.vz;
}

template <int _tmpl>
bool Status_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(timestamp, rhs.timestamp) &&
        ::uavcan::areClose(x, rhs.x) &&
        ::uavcan::areClose(vx, rhs.vx) &&
        ::uavcan::areClose(y, rhs.y) &&
        ::uavcan::areClose(vy, rhs.vy) &&
        ::uavcan::areClose(z, rhs.z) &&
        ::uavcan::areClose(vz, rhs.vz);
}

template <int _tmpl>
int Status_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::timestamp::encode(self.timestamp, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::x::encode(self.x, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::vx::encode(self.vx, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::y::encode(self.y, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::vy::encode(self.vy, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::z::encode(self.z, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::vz::encode(self.vz, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int Status_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::timestamp::decode(self.timestamp, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::x::decode(self.x, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::vx::decode(self.vx, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::y::decode(self.y, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::vy::decode(self.vy, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::z::decode(self.z, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::vz::decode(self.vz, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature Status_<_tmpl>::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0x9DD3AC91C2155504ULL);

    FieldTypes::timestamp::extendDataTypeSignature(signature);
    FieldTypes::x::extendDataTypeSignature(signature);
    FieldTypes::vx::extendDataTypeSignature(signature);
    FieldTypes::y::extendDataTypeSignature(signature);
    FieldTypes::vy::extendDataTypeSignature(signature);
    FieldTypes::z::extendDataTypeSignature(signature);
    FieldTypes::vz::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

/*
 * Final typedef
 */
typedef Status_<0> Status;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::morus_uavcan_msgs::control::position_control::Status > _uavcan_gdtr_registrator_Status;

}

} // Namespace position_control
} // Namespace control
} // Namespace morus_uavcan_msgs

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::morus_uavcan_msgs::control::position_control::Status >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::morus_uavcan_msgs::control::position_control::Status::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::morus_uavcan_msgs::control::position_control::Status >::stream(Stream& s, ::morus_uavcan_msgs::control::position_control::Status::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "timestamp: ";
    YamlStreamer< ::morus_uavcan_msgs::control::position_control::Status::FieldTypes::timestamp >::stream(s, obj.timestamp, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "x: ";
    YamlStreamer< ::morus_uavcan_msgs::control::position_control::Status::FieldTypes::x >::stream(s, obj.x, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "vx: ";
    YamlStreamer< ::morus_uavcan_msgs::control::position_control::Status::FieldTypes::vx >::stream(s, obj.vx, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "y: ";
    YamlStreamer< ::morus_uavcan_msgs::control::position_control::Status::FieldTypes::y >::stream(s, obj.y, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "vy: ";
    YamlStreamer< ::morus_uavcan_msgs::control::position_control::Status::FieldTypes::vy >::stream(s, obj.vy, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "z: ";
    YamlStreamer< ::morus_uavcan_msgs::control::position_control::Status::FieldTypes::z >::stream(s, obj.z, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "vz: ";
    YamlStreamer< ::morus_uavcan_msgs::control::position_control::Status::FieldTypes::vz >::stream(s, obj.vz, level + 1);
}

}

namespace morus_uavcan_msgs
{
namespace control
{
namespace position_control
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::morus_uavcan_msgs::control::position_control::Status::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::morus_uavcan_msgs::control::position_control::Status >::stream(s, obj, 0);
    return s;
}

} // Namespace position_control
} // Namespace control
} // Namespace morus_uavcan_msgs

#endif // MORUS_UAVCAN_MSGS_CONTROL_POSITION_CONTROL_STATUS_HPP_INCLUDED