/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: C:\Users\Marko\Documents\Development\morus_fuel_sensor\morus_uavcan_msgs\common\Twist.uavcan
 */

#ifndef MORUS_UAVCAN_MSGS_COMMON_TWIST_HPP_INCLUDED
#define MORUS_UAVCAN_MSGS_COMMON_TWIST_HPP_INCLUDED

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

#include <morus_uavcan_msgs\common\Vector3.hpp>

/******************************* Source text **********************************
#
# This expresses velocity in free space broken into its linear and angular parts
#

morus_uavcan_msgs.common.Vector3 linear
morus_uavcan_msgs.common.Vector3 angular
******************************************************************************/

/********************* DSDL signature source definition ***********************
morus_uavcan_msgs.common.Twist
morus_uavcan_msgs.common.Vector3 linear
morus_uavcan_msgs.common.Vector3 angular
******************************************************************************/

#undef linear
#undef angular

namespace morus_uavcan_msgs
{
namespace common
{

template <int _tmpl>
struct UAVCAN_EXPORT Twist_
{
    typedef const Twist_<_tmpl>& ParameterType;
    typedef Twist_<_tmpl>& ReferenceType;

    struct ConstantTypes
    {
    };

    struct FieldTypes
    {
        typedef ::morus_uavcan_msgs::common::Vector3 linear;
        typedef ::morus_uavcan_msgs::common::Vector3 angular;
    };

    enum
    {
        MinBitLen
            = FieldTypes::linear::MinBitLen
            + FieldTypes::angular::MinBitLen
    };

    enum
    {
        MaxBitLen
            = FieldTypes::linear::MaxBitLen
            + FieldTypes::angular::MaxBitLen
    };

    // Constants

    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::linear >::Type linear;
    typename ::uavcan::StorageType< typename FieldTypes::angular >::Type angular;

    Twist_()
        : linear()
        , angular()
    {
        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

#if UAVCAN_DEBUG
        /*
         * Cross-checking MaxBitLen provided by the DSDL compiler.
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<192 == MaxBitLen>::check();
#endif
    }

    bool operator==(ParameterType rhs) const;
    bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

    /**
     * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
     * floating point fields at any depth.
     */
    bool isClose(ParameterType rhs) const;

    static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindMessage };
    // This type has no default data type ID

    static const char* getDataTypeFullName()
    {
        return "morus_uavcan_msgs.common.Twist";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

};

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool Twist_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        linear == rhs.linear &&
        angular == rhs.angular;
}

template <int _tmpl>
bool Twist_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(linear, rhs.linear) &&
        ::uavcan::areClose(angular, rhs.angular);
}

template <int _tmpl>
int Twist_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::linear::encode(self.linear, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::angular::encode(self.angular, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int Twist_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::linear::decode(self.linear, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::angular::decode(self.angular, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature Twist_<_tmpl>::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0x2FD8A872A0FF73D0ULL);

    FieldTypes::linear::extendDataTypeSignature(signature);
    FieldTypes::angular::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

/*
 * Final typedef
 */
typedef Twist_<0> Twist;

// No default registration

} // Namespace common
} // Namespace morus_uavcan_msgs

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::morus_uavcan_msgs::common::Twist >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::morus_uavcan_msgs::common::Twist::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::morus_uavcan_msgs::common::Twist >::stream(Stream& s, ::morus_uavcan_msgs::common::Twist::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "linear: ";
    YamlStreamer< ::morus_uavcan_msgs::common::Twist::FieldTypes::linear >::stream(s, obj.linear, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "angular: ";
    YamlStreamer< ::morus_uavcan_msgs::common::Twist::FieldTypes::angular >::stream(s, obj.angular, level + 1);
}

}

namespace morus_uavcan_msgs
{
namespace common
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::morus_uavcan_msgs::common::Twist::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::morus_uavcan_msgs::common::Twist >::stream(s, obj, 0);
    return s;
}

} // Namespace common
} // Namespace morus_uavcan_msgs

#endif // MORUS_UAVCAN_MSGS_COMMON_TWIST_HPP_INCLUDED