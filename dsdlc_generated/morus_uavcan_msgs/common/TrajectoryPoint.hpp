/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: C:\Users\Marko\Documents\Development\morus_fuel_sensor\morus_uavcan_msgs\common\TrajectoryPoint.uavcan
 */

#ifndef MORUS_UAVCAN_MSGS_COMMON_TRAJECTORYPOINT_HPP_INCLUDED
#define MORUS_UAVCAN_MSGS_COMMON_TRAJECTORYPOINT_HPP_INCLUDED

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

#include <morus_uavcan_msgs\common\Pose.hpp>
#include <morus_uavcan_msgs\common\Twist.hpp>

/******************************* Source text **********************************
#
# Each trajectory point specifies position, velocity, acceleration
# for the trajectory to be executed
#

morus_uavcan_msgs.common.Pose poisition
morus_uavcan_msgs.common.Twist velocity
morus_uavcan_msgs.common.Twist acceleration
float32 time_from_start
******************************************************************************/

/********************* DSDL signature source definition ***********************
morus_uavcan_msgs.common.TrajectoryPoint
morus_uavcan_msgs.common.Pose poisition
morus_uavcan_msgs.common.Twist velocity
morus_uavcan_msgs.common.Twist acceleration
saturated float32 time_from_start
******************************************************************************/

#undef poisition
#undef velocity
#undef acceleration
#undef time_from_start

namespace morus_uavcan_msgs
{
namespace common
{

template <int _tmpl>
struct UAVCAN_EXPORT TrajectoryPoint_
{
    typedef const TrajectoryPoint_<_tmpl>& ParameterType;
    typedef TrajectoryPoint_<_tmpl>& ReferenceType;

    struct ConstantTypes
    {
    };

    struct FieldTypes
    {
        typedef ::morus_uavcan_msgs::common::Pose poisition;
        typedef ::morus_uavcan_msgs::common::Twist velocity;
        typedef ::morus_uavcan_msgs::common::Twist acceleration;
        typedef ::uavcan::FloatSpec< 32, ::uavcan::CastModeSaturate > time_from_start;
    };

    enum
    {
        MinBitLen
            = FieldTypes::poisition::MinBitLen
            + FieldTypes::velocity::MinBitLen
            + FieldTypes::acceleration::MinBitLen
            + FieldTypes::time_from_start::MinBitLen
    };

    enum
    {
        MaxBitLen
            = FieldTypes::poisition::MaxBitLen
            + FieldTypes::velocity::MaxBitLen
            + FieldTypes::acceleration::MaxBitLen
            + FieldTypes::time_from_start::MaxBitLen
    };

    // Constants

    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::poisition >::Type poisition;
    typename ::uavcan::StorageType< typename FieldTypes::velocity >::Type velocity;
    typename ::uavcan::StorageType< typename FieldTypes::acceleration >::Type acceleration;
    typename ::uavcan::StorageType< typename FieldTypes::time_from_start >::Type time_from_start;

    TrajectoryPoint_()
        : poisition()
        , velocity()
        , acceleration()
        , time_from_start()
    {
        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

#if UAVCAN_DEBUG
        /*
         * Cross-checking MaxBitLen provided by the DSDL compiler.
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<640 == MaxBitLen>::check();
#endif
    }

    bool operator==(ParameterType rhs) const;
    bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

    /**
     * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
     * floating point fields at any depth.
     */
    bool isClose(ParameterType rhs) const;

    static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindMessage };
    // This type has no default data type ID

    static const char* getDataTypeFullName()
    {
        return "morus_uavcan_msgs.common.TrajectoryPoint";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

};

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool TrajectoryPoint_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        poisition == rhs.poisition &&
        velocity == rhs.velocity &&
        acceleration == rhs.acceleration &&
        time_from_start == rhs.time_from_start;
}

template <int _tmpl>
bool TrajectoryPoint_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(poisition, rhs.poisition) &&
        ::uavcan::areClose(velocity, rhs.velocity) &&
        ::uavcan::areClose(acceleration, rhs.acceleration) &&
        ::uavcan::areClose(time_from_start, rhs.time_from_start);
}

template <int _tmpl>
int TrajectoryPoint_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::poisition::encode(self.poisition, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::velocity::encode(self.velocity, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::acceleration::encode(self.acceleration, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::time_from_start::encode(self.time_from_start, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int TrajectoryPoint_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::poisition::decode(self.poisition, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::velocity::decode(self.velocity, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::acceleration::decode(self.acceleration, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::time_from_start::decode(self.time_from_start, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature TrajectoryPoint_<_tmpl>::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0xA66D7D114511EE75ULL);

    FieldTypes::poisition::extendDataTypeSignature(signature);
    FieldTypes::velocity::extendDataTypeSignature(signature);
    FieldTypes::acceleration::extendDataTypeSignature(signature);
    FieldTypes::time_from_start::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

/*
 * Final typedef
 */
typedef TrajectoryPoint_<0> TrajectoryPoint;

// No default registration

} // Namespace common
} // Namespace morus_uavcan_msgs

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::morus_uavcan_msgs::common::TrajectoryPoint >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::morus_uavcan_msgs::common::TrajectoryPoint::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::morus_uavcan_msgs::common::TrajectoryPoint >::stream(Stream& s, ::morus_uavcan_msgs::common::TrajectoryPoint::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "poisition: ";
    YamlStreamer< ::morus_uavcan_msgs::common::TrajectoryPoint::FieldTypes::poisition >::stream(s, obj.poisition, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "velocity: ";
    YamlStreamer< ::morus_uavcan_msgs::common::TrajectoryPoint::FieldTypes::velocity >::stream(s, obj.velocity, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "acceleration: ";
    YamlStreamer< ::morus_uavcan_msgs::common::TrajectoryPoint::FieldTypes::acceleration >::stream(s, obj.acceleration, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "time_from_start: ";
    YamlStreamer< ::morus_uavcan_msgs::common::TrajectoryPoint::FieldTypes::time_from_start >::stream(s, obj.time_from_start, level + 1);
}

}

namespace morus_uavcan_msgs
{
namespace common
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::morus_uavcan_msgs::common::TrajectoryPoint::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::morus_uavcan_msgs::common::TrajectoryPoint >::stream(s, obj, 0);
    return s;
}

} // Namespace common
} // Namespace morus_uavcan_msgs

#endif // MORUS_UAVCAN_MSGS_COMMON_TRAJECTORYPOINT_HPP_INCLUDED