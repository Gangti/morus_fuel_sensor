/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: C:\Users\Marko\Documents\Development\morus_fuel_sensor\morus_uavcan_msgs\common\Pose.uavcan
 */

#ifndef MORUS_UAVCAN_MSGS_COMMON_POSE_HPP_INCLUDED
#define MORUS_UAVCAN_MSGS_COMMON_POSE_HPP_INCLUDED

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

#include <morus_uavcan_msgs\common\Quaternion.hpp>
#include <morus_uavcan_msgs\common\Vector3.hpp>

/******************************* Source text **********************************
#
# A representation of pose in free space, composed of position and orientation
#

morus_uavcan_msgs.common.Vector3 position
morus_uavcan_msgs.common.Quaternion orientation
******************************************************************************/

/********************* DSDL signature source definition ***********************
morus_uavcan_msgs.common.Pose
morus_uavcan_msgs.common.Vector3 position
morus_uavcan_msgs.common.Quaternion orientation
******************************************************************************/

#undef position
#undef orientation

namespace morus_uavcan_msgs
{
namespace common
{

template <int _tmpl>
struct UAVCAN_EXPORT Pose_
{
    typedef const Pose_<_tmpl>& ParameterType;
    typedef Pose_<_tmpl>& ReferenceType;

    struct ConstantTypes
    {
    };

    struct FieldTypes
    {
        typedef ::morus_uavcan_msgs::common::Vector3 position;
        typedef ::morus_uavcan_msgs::common::Quaternion orientation;
    };

    enum
    {
        MinBitLen
            = FieldTypes::position::MinBitLen
            + FieldTypes::orientation::MinBitLen
    };

    enum
    {
        MaxBitLen
            = FieldTypes::position::MaxBitLen
            + FieldTypes::orientation::MaxBitLen
    };

    // Constants

    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::position >::Type position;
    typename ::uavcan::StorageType< typename FieldTypes::orientation >::Type orientation;

    Pose_()
        : position()
        , orientation()
    {
        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

#if UAVCAN_DEBUG
        /*
         * Cross-checking MaxBitLen provided by the DSDL compiler.
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<224 == MaxBitLen>::check();
#endif
    }

    bool operator==(ParameterType rhs) const;
    bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

    /**
     * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
     * floating point fields at any depth.
     */
    bool isClose(ParameterType rhs) const;

    static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindMessage };
    // This type has no default data type ID

    static const char* getDataTypeFullName()
    {
        return "morus_uavcan_msgs.common.Pose";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

};

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool Pose_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        position == rhs.position &&
        orientation == rhs.orientation;
}

template <int _tmpl>
bool Pose_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(position, rhs.position) &&
        ::uavcan::areClose(orientation, rhs.orientation);
}

template <int _tmpl>
int Pose_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::position::encode(self.position, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::orientation::encode(self.orientation, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int Pose_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::position::decode(self.position, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::orientation::decode(self.orientation, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature Pose_<_tmpl>::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0x67F97840F5391BBFULL);

    FieldTypes::position::extendDataTypeSignature(signature);
    FieldTypes::orientation::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

/*
 * Final typedef
 */
typedef Pose_<0> Pose;

// No default registration

} // Namespace common
} // Namespace morus_uavcan_msgs

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::morus_uavcan_msgs::common::Pose >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::morus_uavcan_msgs::common::Pose::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::morus_uavcan_msgs::common::Pose >::stream(Stream& s, ::morus_uavcan_msgs::common::Pose::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "position: ";
    YamlStreamer< ::morus_uavcan_msgs::common::Pose::FieldTypes::position >::stream(s, obj.position, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "orientation: ";
    YamlStreamer< ::morus_uavcan_msgs::common::Pose::FieldTypes::orientation >::stream(s, obj.orientation, level + 1);
}

}

namespace morus_uavcan_msgs
{
namespace common
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::morus_uavcan_msgs::common::Pose::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::morus_uavcan_msgs::common::Pose >::stream(s, obj, 0);
    return s;
}

} // Namespace common
} // Namespace morus_uavcan_msgs

#endif // MORUS_UAVCAN_MSGS_COMMON_POSE_HPP_INCLUDED