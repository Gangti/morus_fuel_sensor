/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: C:\Users\Marko\Documents\Development\morus_fuel_sensor\morus_uavcan_msgs\power\2090.BatteryInfo.uavcan
 */

#ifndef MORUS_UAVCAN_MSGS_POWER_BATTERYINFO_HPP_INCLUDED
#define MORUS_UAVCAN_MSGS_POWER_BATTERYINFO_HPP_INCLUDED

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

#include <uavcan\Timestamp.hpp>

/******************************* Source text **********************************
#
# Single battery info
#

#
# Battery ID defines
#
uint8 FRONT = 1
uint8 RIGHT = 2
uint8 BACK = 3
uint8 LEFT = 4

uavcan.Timestamp timestamp

uint8 battery_id        # 1 - front, 2 - right, 3 - back, 4 - left

float32 voltage 		# battery voltage [Volt]
float32 current			# battery current [Ampere]
float32 percentage		# remaining power [percentage]
******************************************************************************/

/********************* DSDL signature source definition ***********************
morus_uavcan_msgs.power.BatteryInfo
uavcan.Timestamp timestamp
saturated uint8 battery_id
saturated float32 voltage
saturated float32 current
saturated float32 percentage
******************************************************************************/

#undef timestamp
#undef battery_id
#undef voltage
#undef current
#undef percentage
#undef FRONT
#undef RIGHT
#undef BACK
#undef LEFT

namespace morus_uavcan_msgs
{
namespace power
{

template <int _tmpl>
struct UAVCAN_EXPORT BatteryInfo_
{
    typedef const BatteryInfo_<_tmpl>& ParameterType;
    typedef BatteryInfo_<_tmpl>& ReferenceType;

    struct ConstantTypes
    {
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > FRONT;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > RIGHT;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > BACK;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > LEFT;
    };

    struct FieldTypes
    {
        typedef ::uavcan::Timestamp timestamp;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > battery_id;
        typedef ::uavcan::FloatSpec< 32, ::uavcan::CastModeSaturate > voltage;
        typedef ::uavcan::FloatSpec< 32, ::uavcan::CastModeSaturate > current;
        typedef ::uavcan::FloatSpec< 32, ::uavcan::CastModeSaturate > percentage;
    };

    enum
    {
        MinBitLen
            = FieldTypes::timestamp::MinBitLen
            + FieldTypes::battery_id::MinBitLen
            + FieldTypes::voltage::MinBitLen
            + FieldTypes::current::MinBitLen
            + FieldTypes::percentage::MinBitLen
    };

    enum
    {
        MaxBitLen
            = FieldTypes::timestamp::MaxBitLen
            + FieldTypes::battery_id::MaxBitLen
            + FieldTypes::voltage::MaxBitLen
            + FieldTypes::current::MaxBitLen
            + FieldTypes::percentage::MaxBitLen
    };

    // Constants
    static const typename ::uavcan::StorageType< typename ConstantTypes::FRONT >::Type FRONT; // 1
    static const typename ::uavcan::StorageType< typename ConstantTypes::RIGHT >::Type RIGHT; // 2
    static const typename ::uavcan::StorageType< typename ConstantTypes::BACK >::Type BACK; // 3
    static const typename ::uavcan::StorageType< typename ConstantTypes::LEFT >::Type LEFT; // 4

    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::timestamp >::Type timestamp;
    typename ::uavcan::StorageType< typename FieldTypes::battery_id >::Type battery_id;
    typename ::uavcan::StorageType< typename FieldTypes::voltage >::Type voltage;
    typename ::uavcan::StorageType< typename FieldTypes::current >::Type current;
    typename ::uavcan::StorageType< typename FieldTypes::percentage >::Type percentage;

    BatteryInfo_()
        : timestamp()
        , battery_id()
        , voltage()
        , current()
        , percentage()
    {
        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

#if UAVCAN_DEBUG
        /*
         * Cross-checking MaxBitLen provided by the DSDL compiler.
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<160 == MaxBitLen>::check();
#endif
    }

    bool operator==(ParameterType rhs) const;
    bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

    /**
     * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
     * floating point fields at any depth.
     */
    bool isClose(ParameterType rhs) const;

    static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindMessage };
    enum { DefaultDataTypeID = 2090 };

    static const char* getDataTypeFullName()
    {
        return "morus_uavcan_msgs.power.BatteryInfo";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

};

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool BatteryInfo_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        timestamp == rhs.timestamp &&
        battery_id == rhs.battery_id &&
        voltage == rhs.voltage &&
        current == rhs.current &&
        percentage == rhs.percentage;
}

template <int _tmpl>
bool BatteryInfo_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(timestamp, rhs.timestamp) &&
        ::uavcan::areClose(battery_id, rhs.battery_id) &&
        ::uavcan::areClose(voltage, rhs.voltage) &&
        ::uavcan::areClose(current, rhs.current) &&
        ::uavcan::areClose(percentage, rhs.percentage);
}

template <int _tmpl>
int BatteryInfo_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::timestamp::encode(self.timestamp, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::battery_id::encode(self.battery_id, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::voltage::encode(self.voltage, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::current::encode(self.current, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::percentage::encode(self.percentage, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int BatteryInfo_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::timestamp::decode(self.timestamp, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::battery_id::decode(self.battery_id, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::voltage::decode(self.voltage, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::current::decode(self.current, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::percentage::decode(self.percentage, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature BatteryInfo_<_tmpl>::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0x5295D50AB625DC3EULL);

    FieldTypes::timestamp::extendDataTypeSignature(signature);
    FieldTypes::battery_id::extendDataTypeSignature(signature);
    FieldTypes::voltage::extendDataTypeSignature(signature);
    FieldTypes::current::extendDataTypeSignature(signature);
    FieldTypes::percentage::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

template <int _tmpl>
const typename ::uavcan::StorageType< typename BatteryInfo_<_tmpl>::ConstantTypes::FRONT >::Type
    BatteryInfo_<_tmpl>::FRONT = 1U; // 1

template <int _tmpl>
const typename ::uavcan::StorageType< typename BatteryInfo_<_tmpl>::ConstantTypes::RIGHT >::Type
    BatteryInfo_<_tmpl>::RIGHT = 2U; // 2

template <int _tmpl>
const typename ::uavcan::StorageType< typename BatteryInfo_<_tmpl>::ConstantTypes::BACK >::Type
    BatteryInfo_<_tmpl>::BACK = 3U; // 3

template <int _tmpl>
const typename ::uavcan::StorageType< typename BatteryInfo_<_tmpl>::ConstantTypes::LEFT >::Type
    BatteryInfo_<_tmpl>::LEFT = 4U; // 4

/*
 * Final typedef
 */
typedef BatteryInfo_<0> BatteryInfo;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::morus_uavcan_msgs::power::BatteryInfo > _uavcan_gdtr_registrator_BatteryInfo;

}

} // Namespace power
} // Namespace morus_uavcan_msgs

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::morus_uavcan_msgs::power::BatteryInfo >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::morus_uavcan_msgs::power::BatteryInfo::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::morus_uavcan_msgs::power::BatteryInfo >::stream(Stream& s, ::morus_uavcan_msgs::power::BatteryInfo::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "timestamp: ";
    YamlStreamer< ::morus_uavcan_msgs::power::BatteryInfo::FieldTypes::timestamp >::stream(s, obj.timestamp, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "battery_id: ";
    YamlStreamer< ::morus_uavcan_msgs::power::BatteryInfo::FieldTypes::battery_id >::stream(s, obj.battery_id, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "voltage: ";
    YamlStreamer< ::morus_uavcan_msgs::power::BatteryInfo::FieldTypes::voltage >::stream(s, obj.voltage, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "current: ";
    YamlStreamer< ::morus_uavcan_msgs::power::BatteryInfo::FieldTypes::current >::stream(s, obj.current, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "percentage: ";
    YamlStreamer< ::morus_uavcan_msgs::power::BatteryInfo::FieldTypes::percentage >::stream(s, obj.percentage, level + 1);
}

}

namespace morus_uavcan_msgs
{
namespace power
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::morus_uavcan_msgs::power::BatteryInfo::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::morus_uavcan_msgs::power::BatteryInfo >::stream(s, obj, 0);
    return s;
}

} // Namespace power
} // Namespace morus_uavcan_msgs

#endif // MORUS_UAVCAN_MSGS_POWER_BATTERYINFO_HPP_INCLUDED